{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getConversations, getConversationsSuccess, getConversationsFail, setActiveConversation, setActiveConversationSuccess, loadMessages, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageFail, sendMessageSuccess, getConversationDetail, getConversationDetailSuccess, readMessages, loadMoreMessages, loadMoreMessagesSuccess, searchConversations, searchConversationsFail, searchConversationsSuccess, deleteConversationSuccess, deleteConversation, deleteConversationFail } from './actions';\nconst conversationSagas = [{\n  on: getConversations,\n  *worker(data) {\n    try {\n      const resp = yield messageService.getConversations(data.payload);\n      yield put(getConversationsSuccess(resp.data));\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      yield put(getConversationsFail(error));\n    }\n  }\n}, {\n  on: searchConversations,\n  *worker(data) {\n    try {\n      const resp = yield messageService.getConversations(data.payload);\n      yield put(searchConversationsSuccess(resp.data));\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      yield put(searchConversationsFail(error));\n    }\n  }\n}, {\n  on: setActiveConversation,\n  *worker(data) {\n    try {\n      const {\n        source,\n        sourceId,\n        conversationId\n      } = data.payload;\n      const conversationMapping = yield select(state => state.conversation.mapping);\n      if (conversationId) {\n        if (conversationMapping[conversationId]) {\n          yield put(setActiveConversationSuccess(conversationMapping[conversationId]));\n          const readAllMessages = yield messageService.readAllInConversation(conversationId);\n          if (readAllMessages) {\n            yield put(readMessages(conversationId));\n          }\n          yield put(loadMessages({\n            conversationId,\n            limit: 25,\n            offset: 0\n          }));\n        }\n      } else {\n        const resp = yield messageService.createConversation({\n          source,\n          sourceId\n        });\n        const conversation = resp.data;\n        if (conversationMapping[conversation._id]) {\n          yield put(setActiveConversationSuccess(conversationMapping[conversation._id]));\n        } else {\n          yield put(setActiveConversationSuccess(conversation));\n        }\n        yield put(loadMessages({\n          conversationId: conversation._id,\n          limit: 25,\n          offset: 0\n        }));\n      }\n    } catch (e) {\n      message.error('Error occured, please try again later');\n    }\n  }\n}, {\n  on: getConversationDetail,\n  *worker(data) {\n    try {\n      const conversation = yield messageService.getConversationDetail(data.payload.id);\n      yield put(getConversationDetailSuccess(conversation.data));\n    } catch (e) {\n      yield put(getConversationsFail(e));\n    }\n  }\n}];\nconst messageSagas = [{\n  on: loadMessages,\n  *worker(data) {\n    try {\n      const messageMap = select(state => state.message.mapping);\n      const {\n        conversationId,\n        offset,\n        limit\n      } = data.payload;\n      if (messageMap[conversationId] && messageMap[conversationId].fetching) {\n        // do nothing if it is fetching\n        return;\n      }\n      yield put(fetchingMessage({\n        conversationId\n      }));\n      const resp = yield messageService.getMessages(conversationId, {\n        offset,\n        limit\n      });\n      yield put(loadMessagesSuccess({\n        conversationId,\n        items: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (e) {\n      message.error('Error occured, please try again later');\n    }\n  }\n}, {\n  on: loadMoreMessages,\n  *worker(data) {\n    try {\n      const messageMap = select(state => state.message.mapping);\n      const {\n        conversationId,\n        offset,\n        limit\n      } = data.payload;\n      if (messageMap[conversationId] && messageMap[conversationId].fetching) {\n        // do nothing if it is fetching\n        return;\n      }\n      yield put(fetchingMessage({\n        conversationId\n      }));\n      const resp = yield messageService.getMessages(conversationId, {\n        offset,\n        limit\n      });\n      yield put(loadMoreMessagesSuccess({\n        conversationId,\n        items: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (e) {\n      message.error('Error occured, please try again later');\n    }\n  }\n}, {\n  on: sendMessage,\n  *worker(req) {\n    try {\n      const {\n        conversationId,\n        data\n      } = req.payload;\n      const resp = yield messageService.sendMessage(conversationId, data);\n      yield put(sendMessageSuccess(resp.data));\n    } catch (e) {\n      yield put(sendMessageFail(e));\n    }\n  }\n}, {\n  on: deleteConversation,\n  *worker(data) {\n    try {\n      const {\n        conversationId\n      } = data.payload;\n      yield messageService.deleteConversation(conversationId);\n      yield put(deleteConversationSuccess(conversationId));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(deleteConversationFail(error));\n    }\n  }\n}];\nexport default flatten([createSagas(conversationSagas), createSagas(messageSagas)]);","map":{"version":3,"names":["flatten","put","select","createSagas","messageService","message","getConversations","getConversationsSuccess","getConversationsFail","setActiveConversation","setActiveConversationSuccess","loadMessages","fetchingMessage","loadMessagesSuccess","sendMessage","sendMessageFail","sendMessageSuccess","getConversationDetail","getConversationDetailSuccess","readMessages","loadMoreMessages","loadMoreMessagesSuccess","searchConversations","searchConversationsFail","searchConversationsSuccess","deleteConversationSuccess","deleteConversation","deleteConversationFail","conversationSagas","on","worker","data","resp","payload","e","error","Promise","resolve","source","sourceId","conversationId","conversationMapping","state","conversation","mapping","readAllMessages","readAllInConversation","limit","offset","createConversation","_id","id","messageSagas","messageMap","fetching","getMessages","items","total","req"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/message/sagas.ts"],"sourcesContent":["import { flatten } from 'lodash';\r\nimport { put, select } from 'redux-saga/effects';\r\nimport { createSagas } from '@lib/redux';\r\nimport { messageService } from '@services/message.service';\r\nimport { IReduxAction } from 'src/interfaces';\r\nimport { message } from 'antd';\r\nimport {\r\n  getConversations,\r\n  getConversationsSuccess,\r\n  getConversationsFail,\r\n  setActiveConversation,\r\n  setActiveConversationSuccess,\r\n  loadMessages,\r\n  fetchingMessage,\r\n  loadMessagesSuccess,\r\n  sendMessage,\r\n  sendMessageFail,\r\n  sendMessageSuccess,\r\n  getConversationDetail,\r\n  getConversationDetailSuccess,\r\n  readMessages,\r\n  loadMoreMessages,\r\n  loadMoreMessagesSuccess,\r\n  searchConversations,\r\n  searchConversationsFail,\r\n  searchConversationsSuccess,\r\n  deleteConversationSuccess,\r\n  deleteConversation,\r\n  deleteConversationFail\r\n} from './actions';\r\n\r\nconst conversationSagas = [\r\n  {\r\n    on: getConversations,\r\n    * worker(data: IReduxAction<Record<string, string>>) {\r\n      try {\r\n        const resp = yield messageService.getConversations(data.payload);\r\n        yield put(getConversationsSuccess(resp.data));\r\n      } catch (e) {\r\n        // TODO - alert error\r\n        const error = yield Promise.resolve(e);\r\n        yield put(getConversationsFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: searchConversations,\r\n    * worker(data: IReduxAction<Record<string, string>>) {\r\n      try {\r\n        const resp = yield messageService.getConversations(data.payload);\r\n        yield put(searchConversationsSuccess(resp.data));\r\n      } catch (e) {\r\n        // TODO - alert error\r\n        const error = yield Promise.resolve(e);\r\n        yield put(searchConversationsFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: setActiveConversation,\r\n    * worker(data: IReduxAction<Record<string, string>>) {\r\n      try {\r\n        const {\r\n          source, sourceId, conversationId\r\n        } = data.payload;\r\n        const conversationMapping = yield select((state) => state.conversation.mapping);\r\n        if (conversationId) {\r\n          if (conversationMapping[conversationId]) {\r\n            yield put(\r\n              setActiveConversationSuccess(conversationMapping[conversationId])\r\n            );\r\n\r\n            const readAllMessages = yield messageService.readAllInConversation(conversationId);\r\n            if (readAllMessages) {\r\n              yield put(readMessages(conversationId));\r\n            }\r\n            yield put(loadMessages({ conversationId, limit: 25, offset: 0 }));\r\n          }\r\n        } else {\r\n          const resp = yield messageService.createConversation({\r\n            source,\r\n            sourceId\r\n          });\r\n          const conversation = resp.data;\r\n          if (conversationMapping[conversation._id]) {\r\n            yield put(setActiveConversationSuccess(conversationMapping[conversation._id]));\r\n          } else {\r\n            yield put(setActiveConversationSuccess(conversation));\r\n          }\r\n          yield put(loadMessages({ conversationId: conversation._id, limit: 25, offset: 0 }));\r\n        }\r\n      } catch (e) {\r\n        message.error('Error occured, please try again later');\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: getConversationDetail,\r\n    * worker(data: IReduxAction<Record<string, string>>) {\r\n      try {\r\n        const conversation = yield messageService.getConversationDetail(data.payload.id);\r\n        yield put(getConversationDetailSuccess(conversation.data));\r\n      } catch (e) {\r\n        yield put(getConversationsFail(e));\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nconst messageSagas = [\r\n  {\r\n    on: loadMessages,\r\n    * worker(data: IReduxAction<Record<string, any>>) {\r\n      try {\r\n        const messageMap = select((state) => state.message.mapping);\r\n        const { conversationId, offset, limit } = data.payload;\r\n        if (messageMap[conversationId] && messageMap[conversationId].fetching) {\r\n          // do nothing if it is fetching\r\n          return;\r\n        }\r\n        yield put(fetchingMessage({ conversationId }));\r\n        const resp = yield messageService.getMessages(conversationId, { offset, limit });\r\n        yield put(\r\n          loadMessagesSuccess({\r\n            conversationId,\r\n            items: resp.data.data,\r\n            total: resp.data.total\r\n          })\r\n        );\r\n      } catch (e) {\r\n        message.error('Error occured, please try again later');\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: loadMoreMessages,\r\n    * worker(data: IReduxAction<Record<string, any>>) {\r\n      try {\r\n        const messageMap = select((state) => state.message.mapping);\r\n        const { conversationId, offset, limit } = data.payload;\r\n        if (messageMap[conversationId] && messageMap[conversationId].fetching) {\r\n          // do nothing if it is fetching\r\n          return;\r\n        }\r\n        yield put(fetchingMessage({ conversationId }));\r\n        const resp = yield messageService.getMessages(conversationId, { offset, limit });\r\n        yield put(\r\n          loadMoreMessagesSuccess({\r\n            conversationId,\r\n            items: resp.data.data,\r\n            total: resp.data.total\r\n          })\r\n        );\r\n      } catch (e) {\r\n        message.error('Error occured, please try again later');\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: sendMessage,\r\n    * worker(req: IReduxAction<any>) {\r\n      try {\r\n        const { conversationId, data } = req.payload;\r\n        const resp = yield messageService.sendMessage(conversationId, data);\r\n        yield put(sendMessageSuccess(resp.data));\r\n      } catch (e) {\r\n        yield put(sendMessageFail(e));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: deleteConversation,\r\n    * worker(data: IReduxAction<Record<string, string>>) {\r\n      try {\r\n        const { conversationId } = data.payload;\r\n        yield messageService.deleteConversation(conversationId);\r\n        yield put(deleteConversationSuccess(conversationId));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        yield put(deleteConversationFail(error));\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport default flatten([\r\n  createSagas(conversationSagas),\r\n  createSagas(messageSagas)\r\n]);\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,QAAQ;AAChC,SAASC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAChD,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,QAAQ,MAAM;AAC9B,SACEC,gBAAgB,EAChBC,uBAAuB,EACvBC,oBAAoB,EACpBC,qBAAqB,EACrBC,4BAA4B,EAC5BC,YAAY,EACZC,eAAe,EACfC,mBAAmB,EACnBC,WAAW,EACXC,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,EACrBC,4BAA4B,EAC5BC,YAAY,EACZC,gBAAgB,EAChBC,uBAAuB,EACvBC,mBAAmB,EACnBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,yBAAyB,EACzBC,kBAAkB,EAClBC,sBAAsB,QACjB,WAAW;AAElB,MAAMC,iBAAiB,GAAG,CACxB;EACEC,EAAE,EAAEvB,gBAAgB;EACpB,CAAEwB,MAAMA,CAACC,IAA0C,EAAE;IACnD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAM5B,cAAc,CAACE,gBAAgB,CAACyB,IAAI,CAACE,OAAO,CAAC;MAChE,MAAMhC,GAAG,CAACM,uBAAuB,CAACyB,IAAI,CAACD,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV;MACA,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC,MAAMjC,GAAG,CAACO,oBAAoB,CAAC2B,KAAK,CAAC,CAAC;IACxC;EACF;AACF,CAAC,EACD;EACEN,EAAE,EAAEP,mBAAmB;EACvB,CAAEQ,MAAMA,CAACC,IAA0C,EAAE;IACnD,IAAI;MACF,MAAMC,IAAI,GAAG,MAAM5B,cAAc,CAACE,gBAAgB,CAACyB,IAAI,CAACE,OAAO,CAAC;MAChE,MAAMhC,GAAG,CAACuB,0BAA0B,CAACQ,IAAI,CAACD,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV;MACA,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC,MAAMjC,GAAG,CAACsB,uBAAuB,CAACY,KAAK,CAAC,CAAC;IAC3C;EACF;AACF,CAAC,EACD;EACEN,EAAE,EAAEpB,qBAAqB;EACzB,CAAEqB,MAAMA,CAACC,IAA0C,EAAE;IACnD,IAAI;MACF,MAAM;QACJO,MAAM;QAAEC,QAAQ;QAAEC;MACpB,CAAC,GAAGT,IAAI,CAACE,OAAO;MAChB,MAAMQ,mBAAmB,GAAG,MAAMvC,MAAM,CAAEwC,KAAK,IAAKA,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC;MAC/E,IAAIJ,cAAc,EAAE;QAClB,IAAIC,mBAAmB,CAACD,cAAc,CAAC,EAAE;UACvC,MAAMvC,GAAG,CACPS,4BAA4B,CAAC+B,mBAAmB,CAACD,cAAc,CAAC,CAClE,CAAC;UAED,MAAMK,eAAe,GAAG,MAAMzC,cAAc,CAAC0C,qBAAqB,CAACN,cAAc,CAAC;UAClF,IAAIK,eAAe,EAAE;YACnB,MAAM5C,GAAG,CAACkB,YAAY,CAACqB,cAAc,CAAC,CAAC;UACzC;UACA,MAAMvC,GAAG,CAACU,YAAY,CAAC;YAAE6B,cAAc;YAAEO,KAAK,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAE,CAAC,CAAC,CAAC;QACnE;MACF,CAAC,MAAM;QACL,MAAMhB,IAAI,GAAG,MAAM5B,cAAc,CAAC6C,kBAAkB,CAAC;UACnDX,MAAM;UACNC;QACF,CAAC,CAAC;QACF,MAAMI,YAAY,GAAGX,IAAI,CAACD,IAAI;QAC9B,IAAIU,mBAAmB,CAACE,YAAY,CAACO,GAAG,CAAC,EAAE;UACzC,MAAMjD,GAAG,CAACS,4BAA4B,CAAC+B,mBAAmB,CAACE,YAAY,CAACO,GAAG,CAAC,CAAC,CAAC;QAChF,CAAC,MAAM;UACL,MAAMjD,GAAG,CAACS,4BAA4B,CAACiC,YAAY,CAAC,CAAC;QACvD;QACA,MAAM1C,GAAG,CAACU,YAAY,CAAC;UAAE6B,cAAc,EAAEG,YAAY,CAACO,GAAG;UAAEH,KAAK,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAE,CAAC,CAAC,CAAC;MACrF;IACF,CAAC,CAAC,OAAOd,CAAC,EAAE;MACV7B,OAAO,CAAC8B,KAAK,CAAC,uCAAuC,CAAC;IACxD;EACF;AACF,CAAC,EACD;EACEN,EAAE,EAAEZ,qBAAqB;EACzB,CAAEa,MAAMA,CAACC,IAA0C,EAAE;IACnD,IAAI;MACF,MAAMY,YAAY,GAAG,MAAMvC,cAAc,CAACa,qBAAqB,CAACc,IAAI,CAACE,OAAO,CAACkB,EAAE,CAAC;MAChF,MAAMlD,GAAG,CAACiB,4BAA4B,CAACyB,YAAY,CAACZ,IAAI,CAAC,CAAC;IAC5D,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV,MAAMjC,GAAG,CAACO,oBAAoB,CAAC0B,CAAC,CAAC,CAAC;IACpC;EACF;AACF,CAAC,CACF;AAED,MAAMkB,YAAY,GAAG,CACnB;EACEvB,EAAE,EAAElB,YAAY;EAChB,CAAEmB,MAAMA,CAACC,IAAuC,EAAE;IAChD,IAAI;MACF,MAAMsB,UAAU,GAAGnD,MAAM,CAAEwC,KAAK,IAAKA,KAAK,CAACrC,OAAO,CAACuC,OAAO,CAAC;MAC3D,MAAM;QAAEJ,cAAc;QAAEQ,MAAM;QAAED;MAAM,CAAC,GAAGhB,IAAI,CAACE,OAAO;MACtD,IAAIoB,UAAU,CAACb,cAAc,CAAC,IAAIa,UAAU,CAACb,cAAc,CAAC,CAACc,QAAQ,EAAE;QACrE;QACA;MACF;MACA,MAAMrD,GAAG,CAACW,eAAe,CAAC;QAAE4B;MAAe,CAAC,CAAC,CAAC;MAC9C,MAAMR,IAAI,GAAG,MAAM5B,cAAc,CAACmD,WAAW,CAACf,cAAc,EAAE;QAAEQ,MAAM;QAAED;MAAM,CAAC,CAAC;MAChF,MAAM9C,GAAG,CACPY,mBAAmB,CAAC;QAClB2B,cAAc;QACdgB,KAAK,EAAExB,IAAI,CAACD,IAAI,CAACA,IAAI;QACrB0B,KAAK,EAAEzB,IAAI,CAACD,IAAI,CAAC0B;MACnB,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAOvB,CAAC,EAAE;MACV7B,OAAO,CAAC8B,KAAK,CAAC,uCAAuC,CAAC;IACxD;EACF;AACF,CAAC,EACD;EACEN,EAAE,EAAET,gBAAgB;EACpB,CAAEU,MAAMA,CAACC,IAAuC,EAAE;IAChD,IAAI;MACF,MAAMsB,UAAU,GAAGnD,MAAM,CAAEwC,KAAK,IAAKA,KAAK,CAACrC,OAAO,CAACuC,OAAO,CAAC;MAC3D,MAAM;QAAEJ,cAAc;QAAEQ,MAAM;QAAED;MAAM,CAAC,GAAGhB,IAAI,CAACE,OAAO;MACtD,IAAIoB,UAAU,CAACb,cAAc,CAAC,IAAIa,UAAU,CAACb,cAAc,CAAC,CAACc,QAAQ,EAAE;QACrE;QACA;MACF;MACA,MAAMrD,GAAG,CAACW,eAAe,CAAC;QAAE4B;MAAe,CAAC,CAAC,CAAC;MAC9C,MAAMR,IAAI,GAAG,MAAM5B,cAAc,CAACmD,WAAW,CAACf,cAAc,EAAE;QAAEQ,MAAM;QAAED;MAAM,CAAC,CAAC;MAChF,MAAM9C,GAAG,CACPoB,uBAAuB,CAAC;QACtBmB,cAAc;QACdgB,KAAK,EAAExB,IAAI,CAACD,IAAI,CAACA,IAAI;QACrB0B,KAAK,EAAEzB,IAAI,CAACD,IAAI,CAAC0B;MACnB,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAOvB,CAAC,EAAE;MACV7B,OAAO,CAAC8B,KAAK,CAAC,uCAAuC,CAAC;IACxD;EACF;AACF,CAAC,EACD;EACEN,EAAE,EAAEf,WAAW;EACf,CAAEgB,MAAMA,CAAC4B,GAAsB,EAAE;IAC/B,IAAI;MACF,MAAM;QAAElB,cAAc;QAAET;MAAK,CAAC,GAAG2B,GAAG,CAACzB,OAAO;MAC5C,MAAMD,IAAI,GAAG,MAAM5B,cAAc,CAACU,WAAW,CAAC0B,cAAc,EAAET,IAAI,CAAC;MACnE,MAAM9B,GAAG,CAACe,kBAAkB,CAACgB,IAAI,CAACD,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV,MAAMjC,GAAG,CAACc,eAAe,CAACmB,CAAC,CAAC,CAAC;IAC/B;EACF;AACF,CAAC,EACD;EACEL,EAAE,EAAEH,kBAAkB;EACtB,CAAEI,MAAMA,CAACC,IAA0C,EAAE;IACnD,IAAI;MACF,MAAM;QAAES;MAAe,CAAC,GAAGT,IAAI,CAACE,OAAO;MACvC,MAAM7B,cAAc,CAACsB,kBAAkB,CAACc,cAAc,CAAC;MACvD,MAAMvC,GAAG,CAACwB,yBAAyB,CAACe,cAAc,CAAC,CAAC;IACtD,CAAC,CAAC,OAAON,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC,MAAMjC,GAAG,CAAC0B,sBAAsB,CAACQ,KAAK,CAAC,CAAC;IAC1C;EACF;AACF,CAAC,CACF;AAED,eAAenC,OAAO,CAAC,CACrBG,WAAW,CAACyB,iBAAiB,CAAC,EAC9BzB,WAAW,CAACiD,YAAY,CAAC,CAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}