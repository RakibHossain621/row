{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, authService, performerService } from '@services/index';\nimport { message } from 'antd';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, updatePassword, updatePasswordSuccess, updatePasswordFail, updatePerformer, updateBanking, updateBankingSuccess, updateBankingFail, setUpdatingBanking } from './actions';\nconst userSagas = [\n// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield userService.updateMe(data.payload);\n      yield put(updateUserSuccess(updated.data));\n      message.success('Changes saved');\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updateUserFail(error));\n    } finally {\n      yield put(setUpdating(false));\n    }\n  }\n}, {\n  on: updatePerformer,\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield performerService.updateMe(data.payload._id, data.payload);\n      yield put(updateUserSuccess(updated.data));\n      message.success('Changes saved');\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updateUserFail(error));\n    } finally {\n      yield put(setUpdating(false));\n    }\n  }\n}, {\n  on: updatePassword,\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield authService.updatePassword(data.payload);\n      yield put(updatePasswordSuccess(updated.data));\n      message.success('Changes saved');\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updatePasswordFail(error));\n    } finally {\n      yield put(setUpdating(false));\n    }\n  }\n}, {\n  on: updateBanking,\n  *worker(data) {\n    try {\n      yield put(setUpdatingBanking(true));\n      const updated = yield performerService.updateBanking(data.payload.performerId, data.payload);\n      message.success('Changes saved');\n      yield put(updateBankingSuccess(updated.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updateBankingFail(error));\n    } finally {\n      yield put(setUpdatingBanking(false));\n    }\n  }\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"names":["flatten","put","createSagas","userService","authService","performerService","message","updateUser","updateUserSuccess","updateUserFail","setUpdating","updatePassword","updatePasswordSuccess","updatePasswordFail","updatePerformer","updateBanking","updateBankingSuccess","updateBankingFail","setUpdatingBanking","userSagas","on","worker","data","updated","updateMe","payload","success","e","error","Promise","resolve","_id","performerId"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/user/sagas.ts"],"sourcesContent":["import { flatten } from 'lodash';\r\nimport { put } from 'redux-saga/effects';\r\nimport { createSagas } from '@lib/redux';\r\nimport { userService, authService, performerService } from '@services/index';\r\nimport { IReduxAction, IBanking } from 'src/interfaces';\r\nimport { message } from 'antd';\r\nimport {\r\n  updateUser,\r\n  updateUserSuccess,\r\n  updateUserFail,\r\n  setUpdating,\r\n  updatePassword,\r\n  updatePasswordSuccess,\r\n  updatePasswordFail,\r\n  updatePerformer,\r\n  updateBanking,\r\n  updateBankingSuccess,\r\n  updateBankingFail,\r\n  setUpdatingBanking\r\n} from './actions';\r\n\r\nconst userSagas = [\r\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\r\n  {\r\n    on: updateUser,\r\n    * worker(data: IReduxAction<any>) {\r\n      try {\r\n        yield put(setUpdating(true));\r\n        const updated = yield userService.updateMe(data.payload);\r\n        yield put(updateUserSuccess(updated.data));\r\n        message.success('Changes saved');\r\n      } catch (e) {\r\n        // TODO - alert error\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error?.message || 'Error occured, please try again later');\r\n        yield put(updateUserFail(error));\r\n      } finally {\r\n        yield put(setUpdating(false));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: updatePerformer,\r\n    * worker(data: IReduxAction<any>) {\r\n      try {\r\n        yield put(setUpdating(true));\r\n        const updated = yield performerService.updateMe(data.payload._id, data.payload);\r\n        yield put(updateUserSuccess(updated.data));\r\n        message.success('Changes saved');\r\n      } catch (e) {\r\n        // TODO - alert error\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error?.message || 'Error occured, please try again later');\r\n        yield put(updateUserFail(error));\r\n      } finally {\r\n        yield put(setUpdating(false));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: updatePassword,\r\n    * worker(data: IReduxAction<any>) {\r\n      try {\r\n        yield put(setUpdating(true));\r\n        const updated = yield authService.updatePassword(data.payload);\r\n        yield put(updatePasswordSuccess(updated.data));\r\n        message.success('Changes saved');\r\n      } catch (e) {\r\n        // TODO - alert error\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error?.message || 'Error occured, please try again later');\r\n        yield put(updatePasswordFail(error));\r\n      } finally {\r\n        yield put(setUpdating(false));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: updateBanking,\r\n    * worker(data: IReduxAction<IBanking>) {\r\n      try {\r\n        yield put(setUpdatingBanking(true));\r\n        const updated = yield performerService.updateBanking(data.payload.performerId, data.payload);\r\n        message.success('Changes saved');\r\n        yield put(updateBankingSuccess(updated.data));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error?.message || 'Error occured, please try again later');\r\n        yield put(updateBankingFail(error));\r\n      } finally {\r\n        yield put(setUpdatingBanking(false));\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport default flatten([createSagas(userSagas)]);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}