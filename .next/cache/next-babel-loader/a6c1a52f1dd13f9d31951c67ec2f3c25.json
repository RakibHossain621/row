{"ast":null,"code":"import moment from 'moment';\nexport function formatDate(date, format = 'MMM/DD/YYYY') {\n  return moment(date).format(format);\n}\nexport function formatDateFromnow(date, format = 'MMM-DD-YYYY') {\n  if (moment().diff(moment(date), 'years') > 0) {\n    return moment(date).format(format);\n  }\n  return moment(date).fromNow();\n}\nexport function dobToAge(date) {\n  return moment().diff(moment(date), 'years') > 0 && `${moment().diff(moment(date), 'years')}+`;\n}\nexport function formatLocaleDate(dateString) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('pt-BR', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\nexport function formatDateNew(date) {\n  const d = new Date(date);\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const year = d.getFullYear();\n  return `${month}/${day}/${year}`;\n}\nexport function formatDateToMMMDDYYYY(dateInput) {\n  if (!dateInput) {\n    throw new Error(\"Invalid date input. Please provide a valid Date object or a valid date string.\");\n  }\n  const date = new Date(dateInput);\n  if (isNaN(date.getTime())) {\n    throw new Error(\"Invalid date input. Unable to parse the date.\");\n  }\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const month = months[date.getMonth()];\n  const year = date.getFullYear();\n  return `${month}/${day}/${year}`;\n}","map":{"version":3,"names":["moment","formatDate","date","format","formatDateFromnow","diff","fromNow","dobToAge","formatLocaleDate","dateString","Date","toLocaleDateString","day","month","year","formatDateNew","d","String","getMonth","padStart","getDate","getFullYear","formatDateToMMMDDYYYY","dateInput","Error","isNaN","getTime","months"],"sources":["C:/Users/Rokibul/Documents/case/src/lib/date.ts"],"sourcesContent":["import moment from 'moment';\n\nexport function formatDate(date: Date, format = 'MMM/DD/YYYY') {\n  return moment(date).format(format);\n}\n\nexport function formatDateFromnow(date: Date, format = 'MMM-DD-YYYY') {\n  if (moment().diff(moment(date), 'years') > 0) { return moment(date).format(format); }\n  return moment(date).fromNow();\n}\n\nexport function dobToAge(date: Date) {\n  return (\n    moment().diff(moment(date), 'years') > 0\n    && `${moment().diff(moment(date), 'years')}+`\n  );\n}\n\nexport function formatLocaleDate(dateString: string) {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('pt-BR', {\n    day: '2-digit', \n    month: '2-digit', \n    year: 'numeric'\n  });\n}\n\nexport function formatDateNew(date) {\n  const d = new Date(date);\n  const month = String(d.getMonth() + 1).padStart(2, '0'); \n  const day = String(d.getDate()).padStart(2, '0'); \n  const year = d.getFullYear();\n\n  return `${month}/${day}/${year}`;\n}\n\nexport function formatDateToMMMDDYYYY(dateInput:string) {\n  if (!dateInput) {\n    throw new Error(\"Invalid date input. Please provide a valid Date object or a valid date string.\");\n  }\n\n  const date = new Date(dateInput);\n  if (isNaN(date.getTime())) {\n    throw new Error(\"Invalid date input. Unable to parse the date.\");\n  }\n\n  const months = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  ];\n\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const month = months[date.getMonth()];\n  const year = date.getFullYear();\n\n  return `${month}/${day}/${year}`;\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,SAASC,UAAUA,CAACC,IAAU,EAAEC,MAAM,GAAG,aAAa,EAAE;EAC7D,OAAOH,MAAM,CAACE,IAAI,CAAC,CAACC,MAAM,CAACA,MAAM,CAAC;AACpC;AAEA,OAAO,SAASC,iBAAiBA,CAACF,IAAU,EAAEC,MAAM,GAAG,aAAa,EAAE;EACpE,IAAIH,MAAM,CAAC,CAAC,CAACK,IAAI,CAACL,MAAM,CAACE,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE;IAAE,OAAOF,MAAM,CAACE,IAAI,CAAC,CAACC,MAAM,CAACA,MAAM,CAAC;EAAE;EACpF,OAAOH,MAAM,CAACE,IAAI,CAAC,CAACI,OAAO,CAAC,CAAC;AAC/B;AAEA,OAAO,SAASC,QAAQA,CAACL,IAAU,EAAE;EACnC,OACEF,MAAM,CAAC,CAAC,CAACK,IAAI,CAACL,MAAM,CAACE,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,IACrC,GAAGF,MAAM,CAAC,CAAC,CAACK,IAAI,CAACL,MAAM,CAACE,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG;AAEjD;AAEA,OAAO,SAASM,gBAAgBA,CAACC,UAAkB,EAAE;EACnD,MAAMP,IAAI,GAAG,IAAIQ,IAAI,CAACD,UAAU,CAAC;EACjC,OAAOP,IAAI,CAACS,kBAAkB,CAAC,OAAO,EAAE;IACtCC,GAAG,EAAE,SAAS;IACdC,KAAK,EAAE,SAAS;IAChBC,IAAI,EAAE;EACR,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,aAAaA,CAACb,IAAI,EAAE;EAClC,MAAMc,CAAC,GAAG,IAAIN,IAAI,CAACR,IAAI,CAAC;EACxB,MAAMW,KAAK,GAAGI,MAAM,CAACD,CAAC,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,MAAMP,GAAG,GAAGK,MAAM,CAACD,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAChD,MAAML,IAAI,GAAGE,CAAC,CAACK,WAAW,CAAC,CAAC;EAE5B,OAAO,GAAGR,KAAK,IAAID,GAAG,IAAIE,IAAI,EAAE;AAClC;AAEA,OAAO,SAASQ,qBAAqBA,CAACC,SAAgB,EAAE;EACtD,IAAI,CAACA,SAAS,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gFAAgF,CAAC;EACnG;EAEA,MAAMtB,IAAI,GAAG,IAAIQ,IAAI,CAACa,SAAS,CAAC;EAChC,IAAIE,KAAK,CAACvB,IAAI,CAACwB,OAAO,CAAC,CAAC,CAAC,EAAE;IACzB,MAAM,IAAIF,KAAK,CAAC,+CAA+C,CAAC;EAClE;EAEA,MAAMG,MAAM,GAAG,CACb,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EACxC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CACzC;EAED,MAAMf,GAAG,GAAGK,MAAM,CAACf,IAAI,CAACkB,OAAO,CAAC,CAAC,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,MAAMN,KAAK,GAAGc,MAAM,CAACzB,IAAI,CAACgB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMJ,IAAI,GAAGZ,IAAI,CAACmB,WAAW,CAAC,CAAC;EAE/B,OAAO,GAAGR,KAAK,IAAID,GAAG,IAAIE,IAAI,EAAE;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module"}