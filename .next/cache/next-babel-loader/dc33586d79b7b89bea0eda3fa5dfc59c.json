{"ast":null,"code":"import { cloneDeep } from 'lodash';\nimport Router from 'next/router';\nimport * as pathToRegexp from 'path-to-regexp';\n\n/**\n * Convert an array to a tree-structured array.\n * @param   {array}     array     The Array need to Converted.\n * @param   {string}    id        The alias of the unique ID of the object in the array.\n * @param   {string}    parentId       The alias of the parent ID of the object in the array.\n * @param   {string}    children  The alias of children of the object in the array.\n * @return  {array}    Return a tree-structured array.\n */\nexport function arrayToTree(array, id = 'id', parentId = 'pid', children = 'children') {\n  const result = [];\n  const hash = {};\n  const data = cloneDeep(array);\n  data.forEach((item, index) => {\n    hash[data[index][id]] = data[index];\n  });\n  data.forEach(item => {\n    const hashParent = hash[item[parentId]];\n    if (hashParent) {\n      !hashParent[children] && (hashParent[children] = []);\n      hashParent[children].push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n\n/**\n * Whether the path matches the regexp if the language prefix is ignored, https://github.com/pillarjs/path-to-regexp.\n * @param   {string|regexp|array}     regexp     Specify a string, array of strings, or a regular expression.\n * @param   {string}                  pathname   Specify the pathname to match.\n * @return  {array|null}              Return the result of the match or null.\n */\nexport function pathMatchRegexp(regexp, pathname) {\n  return pathToRegexp.pathToRegexp(regexp).exec(pathname);\n}\n\n/**\n * In an array of objects, specify an object that traverses the objects whose parent ID matches.\n * @param   {array}     array     The Array need to Converted.\n * @param   {string}    current   Specify the object that needs to be queried.\n * @param   {string}    parentId  The alias of the parent ID of the object in the array.\n * @param   {string}    id        The alias of the unique ID of the object in the array.\n * @return  {array}    Return a key array.\n */\nexport function queryAncestors(array, current, parentId, id = 'id') {\n  const result = [current];\n  const hashMap = new Map();\n  array.forEach(item => hashMap.set(item[id], item));\n  const getPath = pr => {\n    const currentParentId = hashMap.get(pr[id])[parentId];\n    if (currentParentId) {\n      result.push(hashMap.get(currentParentId));\n      getPath(hashMap.get(currentParentId));\n    }\n  };\n  getPath(current);\n  return result;\n}\nexport function getResponseError(data) {\n  if (!data) {\n    return '';\n  }\n  if (Array.isArray(data.message)) {\n    const item = data.message[0];\n    if (!item.constraints) {\n      return data.error || 'Bad request!';\n    }\n    return Object.values(item.constraints)[0];\n  }\n\n  // TODO - parse for langauge or others\n  return typeof data.message === 'string' ? data.message : 'Bad request!';\n}\nexport function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport function redirect404(ctx = null) {\n  if (false) {\n    Router.push('/404');\n    return {};\n  }\n  if (!ctx) return {};\n  ctx.res.writeHead && ctx.res.writeHead(302, {\n    Location: '/404'\n  });\n  ctx.res.end && ctx.res.end();\n  // getInitialProps should not return undefined\n  return {};\n}","map":{"version":3,"names":["cloneDeep","Router","pathToRegexp","arrayToTree","array","id","parentId","children","result","hash","data","forEach","item","index","hashParent","push","pathMatchRegexp","regexp","pathname","exec","queryAncestors","current","hashMap","Map","set","getPath","pr","currentParentId","get","getResponseError","Array","isArray","message","constraints","error","Object","values","delay","ms","Promise","resolve","setTimeout","redirect404","ctx","res","writeHead","Location","end"],"sources":["C:/Users/Rokibul/Documents/case/src/lib/utils.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport Router from 'next/router';\nimport * as pathToRegexp from 'path-to-regexp';\n\n/**\n * Convert an array to a tree-structured array.\n * @param   {array}     array     The Array need to Converted.\n * @param   {string}    id        The alias of the unique ID of the object in the array.\n * @param   {string}    parentId       The alias of the parent ID of the object in the array.\n * @param   {string}    children  The alias of children of the object in the array.\n * @return  {array}    Return a tree-structured array.\n */\nexport function arrayToTree(array, id = 'id', parentId = 'pid', children = 'children') {\n  const result = [];\n  const hash = {};\n  const data = cloneDeep(array);\n\n  data.forEach((item, index) => {\n    hash[data[index][id]] = data[index];\n  });\n\n  data.forEach((item) => {\n    const hashParent = hash[item[parentId]];\n    if (hashParent) {\n      !hashParent[children] && (hashParent[children] = []);\n      hashParent[children].push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n\n/**\n * Whether the path matches the regexp if the language prefix is ignored, https://github.com/pillarjs/path-to-regexp.\n * @param   {string|regexp|array}     regexp     Specify a string, array of strings, or a regular expression.\n * @param   {string}                  pathname   Specify the pathname to match.\n * @return  {array|null}              Return the result of the match or null.\n */\nexport function pathMatchRegexp(regexp, pathname) {\n  return pathToRegexp.pathToRegexp(regexp).exec(pathname);\n}\n\n/**\n * In an array of objects, specify an object that traverses the objects whose parent ID matches.\n * @param   {array}     array     The Array need to Converted.\n * @param   {string}    current   Specify the object that needs to be queried.\n * @param   {string}    parentId  The alias of the parent ID of the object in the array.\n * @param   {string}    id        The alias of the unique ID of the object in the array.\n * @return  {array}    Return a key array.\n */\nexport function queryAncestors(array, current, parentId, id = 'id') {\n  const result = [current];\n  const hashMap = new Map();\n  array.forEach((item) => hashMap.set(item[id], item));\n\n  const getPath = (pr) => {\n    const currentParentId = hashMap.get(pr[id])[parentId];\n    if (currentParentId) {\n      result.push(hashMap.get(currentParentId));\n      getPath(hashMap.get(currentParentId));\n    }\n  };\n\n  getPath(current);\n  return result;\n}\n\nexport function getResponseError(data: any) {\n  if (!data) {\n    return '';\n  }\n\n  if (Array.isArray(data.message)) {\n    const item = data.message[0];\n    if (!item.constraints) {\n      return data.error || 'Bad request!';\n    }\n    return Object.values(item.constraints)[0];\n  }\n\n  // TODO - parse for langauge or others\n  return typeof data.message === 'string' ? data.message : 'Bad request!';\n}\n\nexport function delay(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function redirect404(ctx = null) {\n  if (typeof window !== 'undefined') {\n    Router.push('/404');\n    return {};\n  }\n\n  if (!ctx) return {};\n\n  ctx.res.writeHead && ctx.res.writeHead(302, { Location: '/404' });\n  ctx.res.end && ctx.res.end();\n  // getInitialProps should not return undefined\n  return {};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}