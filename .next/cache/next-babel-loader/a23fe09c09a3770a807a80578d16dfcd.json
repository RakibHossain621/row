{"ast":null,"code":"export function videoDuration(s) {\n  if (!s) {\n    return '00:00';\n  }\n  var secNum = parseInt(s, 10); // don't forget the second param\n  var hours = Math.floor(secNum / 3600);\n  var minutes = Math.floor((secNum - hours * 3600) / 60);\n  var seconds = secNum - hours * 3600 - minutes * 60;\n  if (hours < 10) hours = \"0\".concat(hours);\n  if (minutes < 10) minutes = \"0\".concat(minutes);\n  if (seconds < 10) seconds = \"0\".concat(seconds);\n  return \"\".concat((hours !== '00' ? \"\".concat(hours, \":\") : '') + minutes, \":\").concat(seconds);\n}","map":{"version":3,"names":["videoDuration","s","secNum","parseInt","hours","Math","floor","minutes","seconds","concat"],"sources":["C:/Users/roman/Pictures/Case/row/src/lib/duration.ts"],"sourcesContent":["export function videoDuration(s) {\r\n  if (!s) {\r\n    return '00:00';\r\n  }\r\n  const secNum: any = parseInt(s, 10); // don't forget the second param\r\n  let hours: any = Math.floor(secNum / 3600);\r\n  let minutes: any = Math.floor((secNum - (hours * 3600)) / 60);\r\n  let seconds: any = secNum - (hours * 3600) - (minutes * 60);\r\n\r\n  if (hours < 10) hours = `0${hours}`;\r\n  if (minutes < 10) minutes = `0${minutes}`;\r\n  if (seconds < 10) seconds = `0${seconds}`;\r\n  return `${(hours !== '00' ? `${hours}:` : '') + minutes}:${seconds}`;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,CAAC,EAAE;EAC/B,IAAI,CAACA,CAAC,EAAE;IACN,OAAO,OAAO;EAChB;EACA,IAAMC,MAAW,GAAGC,QAAQ,CAACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACrC,IAAIG,KAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,GAAG,IAAI,CAAC;EAC1C,IAAIK,OAAY,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACJ,MAAM,GAAIE,KAAK,GAAG,IAAK,IAAI,EAAE,CAAC;EAC7D,IAAII,OAAY,GAAGN,MAAM,GAAIE,KAAK,GAAG,IAAK,GAAIG,OAAO,GAAG,EAAG;EAE3D,IAAIH,KAAK,GAAG,EAAE,EAAEA,KAAK,OAAAK,MAAA,CAAOL,KAAK,CAAE;EACnC,IAAIG,OAAO,GAAG,EAAE,EAAEA,OAAO,OAAAE,MAAA,CAAOF,OAAO,CAAE;EACzC,IAAIC,OAAO,GAAG,EAAE,EAAEA,OAAO,OAAAC,MAAA,CAAOD,OAAO,CAAE;EACzC,UAAAC,MAAA,CAAU,CAACL,KAAK,KAAK,IAAI,MAAAK,MAAA,CAAML,KAAK,SAAM,EAAE,IAAIG,OAAO,OAAAE,MAAA,CAAID,OAAO;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module"}