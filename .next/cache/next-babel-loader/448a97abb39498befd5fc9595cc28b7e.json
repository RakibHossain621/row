{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rokibul\\\\Documents\\\\case\\\\src\\\\components\\\\user\\\\cover-upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* eslint-disable react/require-default-props */\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, EditOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport { fileService } from '@services/file.service';\nexport class CoverUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      loading: false,\n      uploading: false\n    });\n    _defineProperty(this, \"beforeUpload\", file => {\n      const config = getGlobalConfig();\n      const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n      if (!isLt2M) {\n        message.error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n        return false;\n      }\n      return this.handleUploadCover(file);\n    });\n    _defineProperty(this, \"onPreview\", async file => {\n      let src = file.url;\n      if (!src) {\n        src = await new Promise(resolve => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file.originFileObj);\n          reader.onload = () => resolve(reader.result);\n        });\n      }\n      const image = new Image();\n      image.src = src;\n      const imgWindow = window.open(src);\n      imgWindow.document.write(image.outerHTML);\n    });\n    _defineProperty(this, \"handleUploadCover\", async file => {\n      try {\n        const {\n          user,\n          onFinish\n        } = this.props;\n        this.setState({\n          uploading: true\n        });\n        const resp = await performerService.uploadCoverFiles(file, {\n          uploaderId: user._id\n        }, null);\n        const {\n          data: cover\n        } = await fileService.getPublicInfo({\n          fileId: resp.fileId\n        });\n        if (cover) {\n          onFinish({\n            coverId: resp.fileId,\n            cover: cover === null || cover === void 0 ? void 0 : cover.url\n          });\n        }\n      } catch (error) {\n        const errorMessage = Promise.resolve(error);\n        message.error(getResponseError(errorMessage) || 'Something went wrong');\n      } finally {\n        this.setState({\n          uploading: false\n        });\n      }\n    });\n  }\n  render() {\n    const {\n      loading,\n      uploading\n    } = this.state;\n    const {\n      headers,\n      options\n    } = this.props;\n    return __jsx(ImgCrop, {\n      aspect: 4.5 / 1,\n      shape: \"rect\",\n      quality: 1,\n      modalTitle: \"Edit cover image\",\n      modalWidth: 767,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, __jsx(Upload, {\n      accept: \"image/*\",\n      name: options.fieldName || 'file',\n      listType: \"picture-card\",\n      showUploadList: false,\n      beforeUpload: this.beforeUpload,\n      onPreview: this.onPreview,\n      headers: headers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, loading || uploading ? __jsx(LoadingOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 37\n      }\n    }) : __jsx(EditOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 59\n      }\n    }), ' ', \"Edit cover\"));\n  }\n}","map":{"version":3,"names":["PureComponent","Upload","message","LoadingOutlined","EditOutlined","ImgCrop","getGlobalConfig","getResponseError","performerService","fileService","CoverUpload","constructor","args","_defineProperty","loading","uploading","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","handleUploadCover","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","user","onFinish","props","setState","resp","uploadCoverFiles","uploaderId","_id","data","cover","getPublicInfo","fileId","coverId","errorMessage","render","state","headers","options","__jsx","aspect","shape","quality","modalTitle","modalWidth","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","name","fieldName","listType","showUploadList","beforeUpload","onPreview"],"sources":["C:/Users/Rokibul/Documents/case/src/components/user/cover-upload.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, EditOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\nimport { IPerformer } from '@interfaces/performer';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport { fileService } from '@services/file.service';\n\ninterface IState {\n  loading: boolean;\n  uploading: boolean;\n}\n\ninterface IProps {\n  headers?: any;\n  options?: any;\n  onFinish: Function;\n  user: IPerformer\n}\n\nexport class CoverUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    uploading: false\n  };\n\n  beforeUpload = (file) => {\n    const config = getGlobalConfig();\n    const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n    if (!isLt2M) {\n      message.error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n      return false;\n    }\n    return this.handleUploadCover(file);\n  }\n\n  onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  handleUploadCover = async (file) => {\n    try {\n      const { user, onFinish } = this.props;\n      this.setState({ uploading: true });\n      const resp = await performerService.uploadCoverFiles(file, { uploaderId: user._id }, null);\n      const { data: cover } = await fileService.getPublicInfo({ fileId: resp.fileId });\n      if (cover) {\n        onFinish({ coverId: resp.fileId, cover: cover?.url });\n      }\n    } catch (error) {\n      const errorMessage = Promise.resolve(error);\n      message.error(getResponseError(errorMessage) || 'Something went wrong');\n    } finally {\n      this.setState({ uploading: false });\n    }\n  }\n\n  render() {\n    const { loading, uploading } = this.state;\n    const { headers, options } = this.props;\n    return (\n      <ImgCrop aspect={4.5 / 1} shape=\"rect\" quality={1} modalTitle=\"Edit cover image\" modalWidth={767}>\n        <Upload\n          accept=\"image/*\"\n          name={options.fieldName || 'file'}\n          listType=\"picture-card\"\n          showUploadList={false}\n          beforeUpload={this.beforeUpload}\n          onPreview={this.onPreview}\n          headers={headers}\n        >\n          {(loading || uploading) ? <LoadingOutlined /> : <EditOutlined />}\n          {' '}\n          Edit cover\n        </Upload>\n      </ImgCrop>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}