{"ast":null,"code":"function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* eslint-disable indent */\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nimport { getGlobalConfig } from './config';\nexport const TOKEN = 'token';\nexport class APIRequest {\n  setAuthHeaderToken(token) {\n    APIRequest.token = token;\n  }\n\n  /**\r\n   * Parses the JSON returned by a network request\r\n   *\r\n   * @param  {object} response A response from a network request\r\n   *x\r\n   * @return {object}          The parsed JSON from the request\r\n   */\n  parseJSON(response) {\n    if ((response === null || response === void 0 ? void 0 : response.status) === 204 || (response === null || response === void 0 ? void 0 : response.status) === 205) {\n      return null;\n    }\n    return response === null || response === void 0 ? void 0 : response.json();\n  }\n\n  /**\r\n   * Checks if a network request came back fine, and throws an error if not\r\n   *\r\n   * @param  {object} response   A response from a network request\r\n   *\r\n   * @return {object|undefined} Returns either the response, or throws an error\r\n   */\n  checkStatus(response) {\n    if ((response === null || response === void 0 ? void 0 : response.status) >= 200 && (response === null || response === void 0 ? void 0 : response.status) < 300) {\n      return response;\n    }\n    if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n      if (false) {\n        Router.push('/login');\n      }\n\n      // throw new Error('Please login!');\n    }\n\n    // if (response.status === 403) {\n    //   throw new Error('Please login!');\n    // }\n\n    // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n    throw response.clone().json();\n  }\n  request(url, method, body, headers) {\n    const verb = (method || 'get').toUpperCase();\n    const updatedHeader = _objectSpread({\n      'Content-Type': 'application/json',\n      // TODO - check me\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null\n    }, headers || {});\n    const config = getGlobalConfig();\n    return fetch(isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null\n    }).then(this.checkStatus).then(this.parseJSON);\n  }\n  buildUrl(baseUrl, params) {\n    if (!params) {\n      return baseUrl;\n    }\n    const queryString = Object.keys(params).map(k => {\n      if (Array.isArray(params[k])) {\n        return params[k].map(param => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`).join('&');\n      }\n      return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n    }).join('&');\n    return `${baseUrl}?${queryString}`;\n  }\n  get(url, headers) {\n    return this.request(url, 'get', null, headers);\n  }\n  post(url, data, headers) {\n    return this.request(url, 'post', data, headers);\n  }\n  put(url, data, headers) {\n    return this.request(url, 'put', data, headers);\n  }\n  del(url, data, headers) {\n    return this.request(url, 'delete', data, headers);\n  }\n  upload(url, files, options = {\n    onProgress() {},\n    method: 'POST'\n  }) {\n    const config = getGlobalConfig();\n    const uploadUrl = isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData();\n      files.forEach(f => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData && Object.keys(options.customData).forEach(fieldname => {\n        if (typeof options.customData[fieldname] !== 'undefined' && !Array.isArray(options.customData[fieldname])) formData.append(fieldname, options.customData[fieldname]);\n        if (typeof options.customData[fieldname] !== 'undefined' && Array.isArray(options.customData[fieldname])) {\n          if (options.customData[fieldname].length) {\n            for (let i = 0; i < options.customData[fieldname].length; i += 1) {\n              formData.append(fieldname, options.customData[fieldname][i]);\n            }\n          }\n        }\n      });\n      req.responseType = 'json';\n      req.open(options.method || 'POST', uploadUrl);\n      const token = APIRequest.token || cookie.get(TOKEN);\n      req.setRequestHeader('Authorization', token || '');\n      req.send(formData);\n    });\n  }\n  async uploadUrl({\n    url,\n    body,\n    file,\n    type,\n    fieldName = 'file',\n    onProgress = () => {},\n    fileMetadata = null\n  }) {\n    // load file metadata if needed\n    const {\n      data\n    } = await this.post(url, _objectSpread(_objectSpread({}, body || {}), {}, {\n      type\n    }));\n    const {\n        uploadUrl,\n        fields = [],\n        method = 'POST',\n        fileId\n      } = data,\n      rests = _objectWithoutProperties(data, [\"uploadUrl\", \"fields\", \"method\", \"fileId\"]);\n    // overwrite / update metadata if provided\n    if (fileMetadata && fileId) {\n      await this.put(`/files/${data.fileId}/metadata`, fileMetadata);\n    }\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(_objectSpread(_objectSpread({}, rests), {}, {\n          fileId,\n          status: success\n        }));\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData();\n      if (fields && Object.keys(fields).length) {\n        Object.keys(fields).forEach(key => {\n          formData.append(key, fields[key]);\n        });\n      }\n      // append file at last is required for AWS upload\n      formData.append(fieldName, file, file.name);\n      req.responseType = 'json';\n      req.open(method || 'POST', uploadUrl);\n      req.send(formData);\n    });\n  }\n  async uploadFileAndGetUrl({\n    url,\n    body,\n    file,\n    type\n  }) {\n    const formData = new FormData();\n\n    // Append the file to the formData object\n    if (file) {\n      formData.append('file', file);\n    }\n\n    // Append other body fields to the formData\n    for (const key in body) {\n      if (body.hasOwnProperty(key)) {\n        formData.append(key, body[key]);\n      }\n    }\n\n    // Append type if needed\n    formData.append('type', type);\n    let Headers = {\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null\n    };\n    const response = await fetch(isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\n      method: 'POST',\n      headers: Headers,\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  }\n}\n_defineProperty(APIRequest, \"token\", '');","map":{"version":3,"names":["fetch","Router","cookie","isUrl","getGlobalConfig","TOKEN","APIRequest","setAuthHeaderToken","token","parseJSON","response","status","json","checkStatus","push","clone","request","url","method","body","headers","verb","toUpperCase","updatedHeader","_objectSpread","Authorization","get","config","process","env","API_ENDPOINT","NEXT_PUBLIC_API_ENDPOINT","JSON","stringify","then","buildUrl","baseUrl","params","queryString","Object","keys","map","k","Array","isArray","param","encodeURIComponent","join","post","data","put","del","upload","files","options","onProgress","uploadUrl","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","event","lengthComputable","percentage","loaded","total","success","formData","FormData","forEach","f","append","fieldname","file","name","customData","length","i","responseType","open","setRequestHeader","send","type","fieldName","fileMetadata","fields","fileId","rests","_objectWithoutProperties","key","uploadFileAndGetUrl","hasOwnProperty","Headers","ok","Error","_defineProperty"],"sources":["C:/Users/roman/Pictures/Case/row/src/services/api-request.ts"],"sourcesContent":["/* eslint-disable indent */\r\nimport fetch from 'isomorphic-unfetch';\r\nimport Router from 'next/router';\r\nimport cookie from 'js-cookie';\r\nimport { isUrl } from '@lib/string';\r\nimport { IFileUpload } from 'src/interfaces';\r\nimport { getGlobalConfig } from './config';\r\n\r\nexport interface IResponse<T> {\r\n  status: number;\r\n  data: T;\r\n}\r\n\r\nexport const TOKEN = 'token';\r\n\r\nexport abstract class APIRequest {\r\n  static token: string = '';\r\n\r\n  setAuthHeaderToken(token: string) {\r\n    APIRequest.token = token;\r\n  }\r\n\r\n  /**\r\n   * Parses the JSON returned by a network request\r\n   *\r\n   * @param  {object} response A response from a network request\r\n   *x\r\n   * @return {object}          The parsed JSON from the request\r\n   */\r\n  private parseJSON(response: Response) {\r\n    if (response?.status === 204 || response?.status === 205) {\r\n      return null;\r\n    }\r\n    return response?.json();\r\n  }\r\n\r\n  /**\r\n   * Checks if a network request came back fine, and throws an error if not\r\n   *\r\n   * @param  {object} response   A response from a network request\r\n   *\r\n   * @return {object|undefined} Returns either the response, or throws an error\r\n   */\r\n  private checkStatus(response: Response) {\r\n    if (response?.status >= 200 && response?.status < 300) {\r\n      return response;\r\n    }\r\n\r\n    if (response?.status === 401) {\r\n      if (process.browser) {\r\n        Router.push('/login');\r\n      }\r\n\r\n      // throw new Error('Please login!');\r\n    }\r\n\r\n    // if (response.status === 403) {\r\n    //   throw new Error('Please login!');\r\n    // }\r\n\r\n    // const error = new Error(response.statusText) as any;\r\n    // error.response = response;\r\n    // throw error;\r\n    throw response.clone().json();\r\n  }\r\n\r\n  request(url: string, method?: string, body?: any, headers?: { [key: string]: string }): Promise<IResponse<any>> {\r\n    const verb = (method || 'get').toUpperCase();\r\n    const updatedHeader = {\r\n      'Content-Type': 'application/json',\r\n      // TODO - check me\r\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null,\r\n      ...(headers || {})\r\n    };\r\n    const config = getGlobalConfig();\r\n    return fetch(isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\r\n      method: verb,\r\n      headers: updatedHeader,\r\n      body: body ? JSON.stringify(body) : null\r\n    })\r\n      .then(this.checkStatus)\r\n      .then(this.parseJSON);\r\n  }\r\n\r\n  buildUrl(baseUrl: string, params?: { [key: string]: any }) {\r\n    if (!params) {\r\n      return baseUrl;\r\n    }\r\n\r\n    const queryString = Object.keys(params)\r\n      .map((k) => {\r\n        if (Array.isArray(params[k])) {\r\n          return params[k].map((param) => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`).join('&');\r\n        }\r\n        return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\r\n      })\r\n      .join('&');\r\n    return `${baseUrl}?${queryString}`;\r\n  }\r\n\r\n  get(url: string, headers?: { [key: string]: string }) {\r\n    return this.request(url, 'get', null, headers);\r\n  }\r\n\r\n  post(url: string, data?: any, headers?: { [key: string]: string }) {\r\n    return this.request(url, 'post', data, headers);\r\n  }\r\n\r\n  put(url: string, data?: any, headers?: { [key: string]: string }) {\r\n    return this.request(url, 'put', data, headers);\r\n  }\r\n\r\n  del(url: string, data?: any, headers?: { [key: string]: string }) {\r\n    return this.request(url, 'delete', data, headers);\r\n  }\r\n\r\n  upload(\r\n    url: string,\r\n    files: {\r\n      file: File;\r\n      fieldname: string;\r\n    }[],\r\n    options: {\r\n      onProgress: Function;\r\n      customData?: Record<any, any>;\r\n      method?: string;\r\n    } = {\r\n      onProgress() {},\r\n      method: 'POST'\r\n    }\r\n  ) {\r\n    const config = getGlobalConfig();\r\n    const uploadUrl = isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`;\r\n    return new Promise((resolve, reject) => {\r\n      const req = new XMLHttpRequest();\r\n\r\n      req.upload.addEventListener('progress', (event) => {\r\n        if (event.lengthComputable) {\r\n          options.onProgress({\r\n            percentage: (event.loaded / event.total) * 100\r\n          });\r\n        }\r\n      });\r\n\r\n      req.addEventListener('load', () => {\r\n        const success = req.status >= 200 && req.status < 300;\r\n        const { response } = req;\r\n        if (!success) {\r\n          return reject(response);\r\n        }\r\n        return resolve(response);\r\n      });\r\n\r\n      req.upload.addEventListener('error', () => {\r\n        reject(req.response);\r\n      });\r\n\r\n      const formData = new FormData();\r\n      files.forEach((f) => formData.append(f.fieldname, f.file, f.file.name));\r\n      options.customData\r\n        && Object.keys(options.customData).forEach((fieldname) => {\r\n          if (typeof options.customData[fieldname] !== 'undefined' && !Array.isArray(options.customData[fieldname])) formData.append(fieldname, options.customData[fieldname]);\r\n          if (typeof options.customData[fieldname] !== 'undefined' && Array.isArray(options.customData[fieldname])) {\r\n            if (options.customData[fieldname].length) {\r\n              for (let i = 0; i < options.customData[fieldname].length; i += 1) {\r\n                formData.append(fieldname, options.customData[fieldname][i]);\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n      req.responseType = 'json';\r\n      req.open(options.method || 'POST', uploadUrl);\r\n\r\n      const token: any = APIRequest.token || cookie.get(TOKEN);\r\n      req.setRequestHeader('Authorization', token || '');\r\n      req.send(formData);\r\n    });\r\n  }\r\n\r\n  async uploadUrl({\r\n    url,\r\n    body,\r\n    file,\r\n    type,\r\n    fieldName = 'file',\r\n    onProgress = () => { },\r\n    fileMetadata = null\r\n  }: IFileUpload): Promise<any> {\r\n    // load file metadata if needed\r\n    const { data } = await this.post(url, {\r\n      ...(body || {}),\r\n      type\r\n    });\r\n    const {\r\n      uploadUrl,\r\n      fields = [],\r\n      method = 'POST',\r\n      fileId,\r\n      ...rests\r\n    } = data;\r\n    // overwrite / update metadata if provided\r\n    if (fileMetadata && fileId) {\r\n      await this.put(`/files/${data.fileId}/metadata`, fileMetadata);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const req = new XMLHttpRequest();\r\n\r\n      req.upload.addEventListener('progress', (event) => {\r\n        if (event.lengthComputable) {\r\n          onProgress({\r\n            percentage: (event.loaded / event.total) * 100\r\n          });\r\n        }\r\n      });\r\n\r\n      req.addEventListener('load', () => {\r\n        const success = req.status >= 200 && req.status < 300;\r\n        const { response } = req;\r\n        if (!success) {\r\n          return reject(response);\r\n        }\r\n        return resolve({\r\n          ...rests,\r\n          fileId,\r\n          status: success\r\n        });\r\n      });\r\n\r\n      req.upload.addEventListener('error', () => {\r\n        reject(req.response);\r\n      });\r\n\r\n      const formData = new FormData();\r\n      if (fields && Object.keys(fields).length) {\r\n        Object.keys(fields).forEach((key) => {\r\n          formData.append(key, fields[key]);\r\n        });\r\n      }\r\n      // append file at last is required for AWS upload\r\n      formData.append(fieldName, file, file.name);\r\n      req.responseType = 'json';\r\n      req.open(method || 'POST', uploadUrl);\r\n      req.send(formData);\r\n    });\r\n  }\r\n\r\n  async uploadFileAndGetUrl({\r\n    url,\r\n    body,\r\n    file,\r\n    type\r\n  }: IFileUpload): Promise<any> {\r\n    const formData = new FormData();\r\n    \r\n    // Append the file to the formData object\r\n    if (file) {\r\n      formData.append('file', file);\r\n    }\r\n\r\n    // Append other body fields to the formData\r\n    for (const key in body) {\r\n      if (body.hasOwnProperty(key)) {\r\n        formData.append(key, body[key]);\r\n      }\r\n    }\r\n\r\n    // Append type if needed\r\n    formData.append('type', type);\r\n    let Headers = {\r\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null,\r\n    }\r\n    const response = await fetch(isUrl(url) ? url : `${process.env.API_ENDPOINT || process.env.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\r\n      method: 'POST',\r\n      headers: Headers,\r\n      body: formData\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}