{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { merge, uniq } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getConversations, getConversationsSuccess, getConversationsFail, searchConversations, searchConversationsSuccess, searchConversationsFail, setActiveConversationSuccess, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageSuccess, sendMessageFail, getConversationDetailSuccess, receiveMessageSuccess, readMessages, sentFileSuccess, loadMoreMessagesSuccess, deactiveConversation, resetMessageState, deleteConversationSuccess } from './actions';\nconst initialConversationState = {\n  list: {\n    requesting: false,\n    error: null,\n    data: [],\n    total: 0,\n    success: false\n  },\n  mapping: {},\n  activeConversation: {}\n};\nconst initialMessageState = {\n  // conversationId => { fetching: boolean, items: [] }\n  conversationMap: {},\n  sendMessage: {},\n  receiveMessage: {}\n};\nconst conversationReducer = [{\n  on: resetMessageState,\n  reducer(state) {\n    let {\n      list,\n      mapping,\n      activeConversation\n    } = state;\n    list = {\n      requesting: false,\n      error: null,\n      data: [],\n      total: 0,\n      success: false\n    };\n    mapping = {};\n    activeConversation = {};\n    return _objectSpread(_objectSpread({}, state), {}, {\n      list,\n      mapping,\n      activeConversation\n    });\n  }\n}, {\n  on: getConversations,\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n    nextState.list.requesting = true;\n    return _objectSpread({}, nextState);\n  }\n}, {\n  on: getConversationsSuccess,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = uniq(Ids);\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread(_objectSpread(_objectSpread({}, nextState), list), mapping);\n  }\n}, {\n  on: getConversationsFail,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n}, {\n  on: searchConversations,\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: true,\n        error: null,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n}, {\n  on: searchConversationsSuccess,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = Ids;\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list,\n      mapping\n    });\n  }\n}, {\n  on: searchConversationsFail,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n}, {\n  on: setActiveConversationSuccess,\n  reducer(state, data) {\n    const conversation = data.payload;\n    const list = state.list.data;\n    const {\n      mapping\n    } = state;\n    const check = list.find(c => c === conversation._id);\n    if (!check) {\n      list.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: conversation\n    });\n  }\n}, {\n  on: deleteConversationSuccess,\n  reducer(state, data) {\n    const conversationId = data.payload;\n    const nextState = _objectSpread({}, state);\n    const list = nextState.list.data;\n    const {\n      mapping\n    } = nextState;\n    const index = list.indexOf(conversationId);\n    if (index !== -1) {\n      list.splice(index, 1);\n      delete mapping[conversationId];\n    }\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      activeConversation: {}\n    });\n  }\n}, {\n  on: getConversationDetailSuccess,\n  reducer(state, data) {\n    const {\n      list,\n      mapping\n    } = state;\n    const conversation = data.payload;\n    if (!list.data.includes(conversation._id)) {\n      list.data.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n    return _objectSpread({}, state);\n  }\n}, {\n  on: readMessages,\n  reducer(state, data) {\n    const conversationId = data.payload;\n    const {\n      mapping\n    } = state;\n    mapping[conversationId].totalNotSeenMessages = 0;\n    return _objectSpread({}, state);\n  }\n}, {\n  on: deactiveConversation,\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n    nextState.activeConversation = {};\n    return _objectSpread({}, nextState);\n  }\n}];\nconst messageReducer = [{\n  on: fetchingMessage,\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId\n    } = data.payload;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadMessagesSuccess,\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse()],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadMoreMessagesSuccess,\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse(), ...(conversationMap[conversationId].items || [])],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: sendMessage,\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true\n      }\n    });\n  }\n}, {\n  on: sendMessageSuccess,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n}, {\n  on: sendMessageFail,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n}, {\n  on: receiveMessageSuccess,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    if (!nextState.conversationMap[data.payload.conversationId]) {\n      return _objectSpread({}, nextState);\n    }\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n}, {\n  on: sentFileSuccess,\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n}];\nexport default merge({}, createReducers('conversation', [conversationReducer], initialConversationState), createReducers('message', [messageReducer], initialMessageState));","map":{"version":3,"names":["merge","uniq","createReducers","getConversations","getConversationsSuccess","getConversationsFail","searchConversations","searchConversationsSuccess","searchConversationsFail","setActiveConversationSuccess","fetchingMessage","loadMessagesSuccess","sendMessage","sendMessageSuccess","sendMessageFail","getConversationDetailSuccess","receiveMessageSuccess","readMessages","sentFileSuccess","loadMoreMessagesSuccess","deactiveConversation","resetMessageState","deleteConversationSuccess","initialConversationState","list","requesting","error","data","total","success","mapping","activeConversation","initialMessageState","conversationMap","receiveMessage","conversationReducer","on","reducer","state","_objectSpread","nextState","items","payload","Ids","map","c","_id","forEach","conversation","check","find","unshift","conversationId","index","indexOf","splice","includes","totalNotSeenMessages","messageReducer","fetching","reverse","sending","push"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/message/reducers.ts"],"sourcesContent":["import { merge, uniq } from 'lodash';\r\nimport { createReducers } from '@lib/redux';\r\nimport { IReduxAction } from 'src/interfaces';\r\nimport {\r\n  getConversations,\r\n  getConversationsSuccess,\r\n  getConversationsFail,\r\n  searchConversations,\r\n  searchConversationsSuccess,\r\n  searchConversationsFail,\r\n  setActiveConversationSuccess,\r\n  fetchingMessage,\r\n  loadMessagesSuccess,\r\n  sendMessage,\r\n  sendMessageSuccess,\r\n  sendMessageFail,\r\n  getConversationDetailSuccess,\r\n  receiveMessageSuccess,\r\n  readMessages,\r\n  sentFileSuccess,\r\n  loadMoreMessagesSuccess,\r\n  deactiveConversation,\r\n  resetMessageState,\r\n  deleteConversationSuccess\r\n} from './actions';\r\n\r\nconst initialConversationState = {\r\n  list: {\r\n    requesting: false,\r\n    error: null,\r\n    data: [],\r\n    total: 0,\r\n    success: false\r\n  },\r\n  mapping: {},\r\n  activeConversation: {}\r\n};\r\n\r\nconst initialMessageState = {\r\n  // conversationId => { fetching: boolean, items: [] }\r\n  conversationMap: {},\r\n  sendMessage: {},\r\n  receiveMessage: {}\r\n};\r\n\r\nconst conversationReducer = [\r\n  {\r\n    on: resetMessageState,\r\n    reducer(state: any) {\r\n      let { list, mapping, activeConversation } = state;\r\n      list = {\r\n        requesting: false,\r\n        error: null,\r\n        data: [],\r\n        total: 0,\r\n        success: false\r\n      };\r\n      mapping = {};\r\n      activeConversation = {};\r\n      return {\r\n        ...state,\r\n        list,\r\n        mapping,\r\n        activeConversation\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: getConversations,\r\n    reducer(state: any) {\r\n      const nextState = { ...state };\r\n      nextState.list.requesting = true;\r\n      return {\r\n        ...nextState\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: getConversationsSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      const { list, mapping } = nextState;\r\n      const { data: items, total } = data.payload;\r\n      const Ids = items.map((c) => c._id);\r\n      list.data = uniq(Ids);\r\n      list.total = total;\r\n      list.success = true;\r\n      list.requesting = false;\r\n      list.error = false;\r\n      items.forEach((c) => {\r\n        mapping[c._id] = c;\r\n      });\r\n\r\n      return {\r\n        ...nextState,\r\n        ...list,\r\n        ...mapping\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: getConversationsFail,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        list: {\r\n          requesting: false,\r\n          error: data.payload,\r\n          data: [],\r\n          total: 0,\r\n          success: false\r\n        },\r\n        mapping: {},\r\n        activeConversation: {}\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: searchConversations,\r\n    reducer(state: any) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        list: {\r\n          requesting: true,\r\n          error: null,\r\n          data: [],\r\n          total: 0,\r\n          success: false\r\n        },\r\n        mapping: {},\r\n        activeConversation: {}\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: searchConversationsSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      const { list, mapping } = nextState;\r\n      const { data: items, total } = data.payload;\r\n      const Ids = items.map((c) => c._id);\r\n      list.data = Ids;\r\n      list.total = total;\r\n      list.success = true;\r\n      list.requesting = false;\r\n      list.error = false;\r\n      items.forEach((c) => {\r\n        mapping[c._id] = c;\r\n      });\r\n      return {\r\n        ...nextState,\r\n        list,\r\n        mapping\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: searchConversationsFail,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        list: {\r\n          requesting: false,\r\n          error: data.payload,\r\n          data: [],\r\n          total: 0,\r\n          success: false\r\n        },\r\n        mapping: {},\r\n        activeConversation: {}\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: setActiveConversationSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const conversation = data.payload;\r\n      const list = state.list.data;\r\n      const { mapping } = state;\r\n      const check = list.find((c) => c === conversation._id);\r\n      if (!check) {\r\n        list.unshift(conversation._id);\r\n        mapping[conversation._id] = conversation;\r\n      }\r\n      return {\r\n        ...state,\r\n        activeConversation: conversation\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: deleteConversationSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const conversationId = data.payload;\r\n      const nextState = { ...state };\r\n      const list = nextState.list.data;\r\n      const { mapping } = nextState;\r\n      const index = list.indexOf(conversationId);\r\n      if (index !== -1) {\r\n        list.splice(index, 1);\r\n        delete mapping[conversationId];\r\n      }\r\n      return {\r\n        ...nextState,\r\n        activeConversation: {}\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: getConversationDetailSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { list, mapping } = state;\r\n      const conversation = data.payload;\r\n      if (!list.data.includes(conversation._id)) {\r\n        list.data.unshift(conversation._id);\r\n        mapping[conversation._id] = conversation;\r\n      }\r\n\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: readMessages,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const conversationId = data.payload;\r\n      const { mapping } = state;\r\n      mapping[conversationId].totalNotSeenMessages = 0;\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: deactiveConversation,\r\n    reducer(state: any) {\r\n      const nextState = { ...state };\r\n      nextState.activeConversation = {};\r\n      return {\r\n        ...nextState\r\n      };\r\n    }\r\n  }\r\n];\r\n\r\nconst messageReducer = [\r\n  {\r\n    on: fetchingMessage,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { conversationMap } = state;\r\n      const { conversationId } = data.payload;\r\n      conversationMap[conversationId] = {\r\n        ...conversationMap[conversationId],\r\n        fetching: true\r\n      };\r\n      return { ...state };\r\n    }\r\n  },\r\n  {\r\n    on: loadMessagesSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { conversationMap } = state;\r\n      const { conversationId, items, total } = data.payload;\r\n      conversationMap[conversationId] = {\r\n        items: [...items.reverse()],\r\n        total,\r\n        fetching: false\r\n      };\r\n      return { ...state };\r\n    }\r\n  },\r\n  {\r\n    on: loadMoreMessagesSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { conversationMap } = state;\r\n      const { conversationId, items, total } = data.payload;\r\n      conversationMap[conversationId] = {\r\n        items: [\r\n          ...items.reverse(),\r\n          ...conversationMap[conversationId].items || []\r\n        ],\r\n        total,\r\n        fetching: false\r\n      };\r\n      return { ...state };\r\n    }\r\n  },\r\n  {\r\n    on: sendMessage,\r\n    reducer(state: any) {\r\n      return {\r\n        ...state,\r\n        sendMessage: {\r\n          sending: true\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: sendMessageSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\r\n        nextState.conversationMap[data.payload.conversationId].items = [];\r\n      }\r\n      nextState.conversationMap[data.payload.conversationId].items.push(\r\n        data.payload\r\n      );\r\n      return {\r\n        ...nextState,\r\n        sendMessage: {\r\n          sending: false,\r\n          success: true,\r\n          data: data.payload\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: sendMessageFail,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      return {\r\n        ...state,\r\n        sendMessage: {\r\n          sending: false,\r\n          success: false,\r\n          error: data.payload\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: receiveMessageSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      if (!nextState.conversationMap[data.payload.conversationId]) {\r\n        return { ...nextState };\r\n      }\r\n      nextState.conversationMap[data.payload.conversationId].items.push(\r\n        data.payload\r\n      );\r\n      return {\r\n        ...nextState,\r\n        receiveMessage: data.payload\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: sentFileSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\r\n        nextState.conversationMap[data.payload.conversationId].items = [];\r\n      }\r\n      nextState.conversationMap[data.payload.conversationId].items.push(\r\n        data.payload\r\n      );\r\n      return {\r\n        ...nextState,\r\n        sendMessage: {\r\n          sending: false,\r\n          success: true,\r\n          data: data.payload\r\n        }\r\n      };\r\n    }\r\n  }\r\n];\r\n\r\nexport default merge(\r\n  {},\r\n  createReducers(\r\n    'conversation',\r\n    [conversationReducer],\r\n    initialConversationState\r\n  ),\r\n  createReducers('message', [messageReducer], initialMessageState)\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}