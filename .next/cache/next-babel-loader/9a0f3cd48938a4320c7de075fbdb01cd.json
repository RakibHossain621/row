{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { performerService } from '@services/index';\nimport { getList, getListFail, getListSuccess, getProfile, getProfileFail, getProfileSuccess } from './actions';\nconst performerSagas = [{\n  on: getList,\n  *worker(data) {\n    try {\n      const resp = yield performerService.search(data.payload);\n      yield put(getListSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(getListFail(error));\n    }\n  }\n}, {\n  on: getProfile,\n  *worker(data) {\n    try {\n      const resp = yield performerService.findOne(data.payload);\n      yield put(getProfileSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(getProfileFail(error));\n    }\n  }\n}];\nexport default flatten([createSagas(performerSagas)]);","map":{"version":3,"names":["flatten","put","createSagas","performerService","getList","getListFail","getListSuccess","getProfile","getProfileFail","getProfileSuccess","performerSagas","on","worker","data","resp","search","payload","e","error","Promise","resolve","findOne"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/performer/sagas.ts"],"sourcesContent":["import { flatten } from 'lodash';\r\nimport { put } from 'redux-saga/effects';\r\nimport { createSagas } from '@lib/redux';\r\nimport { performerService } from '@services/index';\r\nimport { IReduxAction } from 'src/interfaces';\r\nimport {\r\n  getList,\r\n  getListFail,\r\n  getListSuccess,\r\n  getProfile,\r\n  getProfileFail,\r\n  getProfileSuccess\r\n} from './actions';\r\n\r\nconst performerSagas = [\r\n  {\r\n    on: getList,\r\n    * worker(data: IReduxAction<any>) {\r\n      try {\r\n        const resp = yield performerService.search(data.payload);\r\n        yield put(getListSuccess(resp.data));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        yield put(getListFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: getProfile,\r\n    * worker(data: IReduxAction<any>) {\r\n      try {\r\n        const resp = yield performerService.findOne(data.payload);\r\n        yield put(getProfileSuccess(resp.data));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        yield put(getProfileFail(error));\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport default flatten([createSagas(performerSagas)]);\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,QAAQ;AAChC,SAASC,GAAG,QAAQ,oBAAoB;AACxC,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,gBAAgB,QAAQ,iBAAiB;AAElD,SACEC,OAAO,EACPC,WAAW,EACXC,cAAc,EACdC,UAAU,EACVC,cAAc,EACdC,iBAAiB,QACZ,WAAW;AAElB,MAAMC,cAAc,GAAG,CACrB;EACEC,EAAE,EAAEP,OAAO;EACX,CAAEQ,MAAMA,CAACC,IAAuB,EAAE;IAChC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMX,gBAAgB,CAACY,MAAM,CAACF,IAAI,CAACG,OAAO,CAAC;MACxD,MAAMf,GAAG,CAACK,cAAc,CAACQ,IAAI,CAACD,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOI,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC,MAAMhB,GAAG,CAACI,WAAW,CAACa,KAAK,CAAC,CAAC;IAC/B;EACF;AACF,CAAC,EACD;EACEP,EAAE,EAAEJ,UAAU;EACd,CAAEK,MAAMA,CAACC,IAAuB,EAAE;IAChC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMX,gBAAgB,CAACkB,OAAO,CAACR,IAAI,CAACG,OAAO,CAAC;MACzD,MAAMf,GAAG,CAACQ,iBAAiB,CAACK,IAAI,CAACD,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOI,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC,MAAMhB,GAAG,CAACO,cAAc,CAACU,KAAK,CAAC,CAAC;IAClC;EACF;AACF,CAAC,CACF;AAED,eAAelB,OAAO,CAAC,CAACE,WAAW,CAACQ,cAAc,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}