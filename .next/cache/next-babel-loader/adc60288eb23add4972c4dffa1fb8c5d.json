{"ast":null,"code":"import { flatten, pick } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport { updateModals } from '@redux/modals/actions';\nimport { loginSocial, login, loginSuccess, logout, loginFail, registerFanFail, registerFan, registerFanSuccess, registerPerformerFail, registerPerformer, registerPerformerSuccess, forgot, forgotSuccess, forgotFail, getCurrentUser } from './actions';\nimport { resetFeeds } from '../feed/actions';\nimport storeHolder from '@lib/storeHolder';\nconst authSagas = [{\n  on: login,\n  *worker(data) {\n    try {\n      var _userResp$data;\n      const payload = data.payload;\n      yield put(resetFeeds());\n      const resp = (yield authService.login(payload)).data;\n      // store token, update store and redirect to dashboard page\n      yield authService.setToken(resp.token, payload === null || payload === void 0 ? void 0 : payload.remember);\n      const userResp = yield userService.me();\n      yield put(updateCurrentUser(userResp.data));\n      // yield put(loginSuccess(userResp.data));\n      yield put(updateModals({\n        isLoginModalOpen: false\n      }));\n      userResp !== null && userResp !== void 0 && userResp.data && (_userResp$data = userResp.data) !== null && _userResp$data !== void 0 && _userResp$data.isUpdateProfile ? Router.push('/home') : Router.push('/model/account');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      if ((error === null || error === void 0 ? void 0 : error.statusCode) === 404) {\n        message.error('This account does not appear to exist. Please sign up to get started.');\n      } else {\n        message.error((error === null || error === void 0 ? void 0 : error.message) || 'Incorrect credentials!');\n        yield put(loginFail(error));\n      }\n    }\n  }\n}, {\n  on: loginSocial,\n  *worker(data) {\n    try {\n      var _userResp$data2, _userResp$data3;\n      const payload = data.payload;\n      const {\n        token\n      } = payload;\n      yield authService.setToken(token);\n      const userResp = yield userService.me();\n      yield put(updateCurrentUser(userResp.data));\n      yield put(loginSuccess());\n      if (!(userResp !== null && userResp !== void 0 && (_userResp$data2 = userResp.data) !== null && _userResp$data2 !== void 0 && _userResp$data2.isPerformer)) {\n        Router.push(!userResp.data.email || !userResp.data.username ? '/user/account' : '/home');\n      }\n      if (userResp !== null && userResp !== void 0 && (_userResp$data3 = userResp.data) !== null && _userResp$data3 !== void 0 && _userResp$data3.isPerformer) {\n        !userResp.data.email || !userResp.data.username ? Router.push('/model/account') : Router.push({\n          pathname: '/model/profile',\n          query: {\n            username: userResp.data.username || userResp.data._id\n          }\n        }, `/${userResp.data.username || userResp.data._id}`);\n      }\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Incorrect credentials!');\n      yield put(loginFail(error));\n    }\n  }\n}, {\n  on: registerFan,\n  *worker(data) {\n    try {\n      const payload = data.payload;\n      const resp = (yield authService.register(payload)).data;\n      const store = storeHolder.getStore();\n      store.dispatch(updateModals({\n        isLoginModalOpen: true,\n        isRegisterModalOpen: false\n      }));\n      message.success((resp === null || resp === void 0 ? void 0 : resp.message) || 'Sign up success!', 10);\n      yield put(registerFanSuccess(resp));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'This Username or email address has been already taken.', 5);\n      yield put(registerFanFail(error));\n    }\n  }\n}, {\n  on: registerPerformer,\n  *worker(data) {\n    try {\n      const verificationFiles = [{\n        fieldname: 'idVerification',\n        file: data.payload.idVerificationFile\n      }, {\n        fieldname: 'documentVerification',\n        file: data.payload.documentVerificationFile\n      }];\n      const payload = pick(data.payload, ['name', 'username', 'password', 'gender', 'email', 'firstName', 'lastName', 'country', 'dateOfBirth']);\n      const resp = (yield authService.registerPerformer(verificationFiles, payload, () => {})).data;\n      yield put(registerPerformerSuccess(resp));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error(error.message || 'An error occured, please try again later');\n      yield put(registerPerformerFail(error));\n    }\n  }\n}, {\n  on: logout,\n  *worker() {\n    window.location.replace(\"/home\");\n    yield authService.removeToken();\n  }\n}, {\n  on: forgot,\n  *worker(data) {\n    try {\n      const payload = data.payload;\n      const resp = (yield authService.resetPassword(payload)).data;\n      message.success('We\\'ve sent an email to reset your password, please check your inbox.', 10);\n      yield put(forgotSuccess(resp));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error(error && error.message || 'Something went wrong. Please try again later', 5);\n      yield put(forgotFail(error));\n    }\n  }\n}, {\n  on: getCurrentUser,\n  *worker() {\n    try {\n      const userResp = yield userService.me();\n      yield put(updateCurrentUser(userResp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  }\n}];\nexport default flatten([createSagas(authSagas)]);","map":{"version":3,"names":["flatten","pick","put","createSagas","Router","authService","userService","message","updateCurrentUser","updateModals","loginSocial","login","loginSuccess","logout","loginFail","registerFanFail","registerFan","registerFanSuccess","registerPerformerFail","registerPerformer","registerPerformerSuccess","forgot","forgotSuccess","forgotFail","getCurrentUser","resetFeeds","storeHolder","authSagas","on","worker","data","_userResp$data","payload","resp","setToken","token","remember","userResp","me","isLoginModalOpen","isUpdateProfile","push","e","error","Promise","resolve","statusCode","_userResp$data2","_userResp$data3","isPerformer","email","username","pathname","query","_id","register","store","getStore","dispatch","isRegisterModalOpen","success","verificationFiles","fieldname","file","idVerificationFile","documentVerificationFile","window","location","replace","removeToken","resetPassword","console","log"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/auth/sagas.ts"],"sourcesContent":["import { flatten, pick } from 'lodash';\r\nimport { put } from 'redux-saga/effects';\r\nimport { createSagas } from '@lib/redux';\r\nimport Router from 'next/router';\r\nimport { authService, userService } from 'src/services';\r\nimport {\r\n  ILogin, IFanRegister, IForgot\r\n} from 'src/interfaces';\r\nimport { message } from 'antd';\r\nimport { getGlobalConfig } from '@services/config';\r\nimport { updateCurrentUser } from '../user/actions';\r\nimport { updateModals } from '@redux/modals/actions';\r\nimport {\r\n  loginSocial,\r\n  login,\r\n  loginSuccess,\r\n  logout,\r\n  loginFail,\r\n  registerFanFail,\r\n  registerFan,\r\n  registerFanSuccess,\r\n  registerPerformerFail,\r\n  registerPerformer,\r\n  registerPerformerSuccess,\r\n  forgot,\r\n  forgotSuccess,\r\n  forgotFail,\r\n  getCurrentUser\r\n} from './actions';\r\n\r\nimport {\r\n\r\n  resetFeeds\r\n} from '../feed/actions';\r\nimport storeHolder from '@lib/storeHolder';\r\n\r\nconst authSagas = [\r\n  {\r\n    on: login,\r\n    * worker(data: any) {\r\n      try {\r\n        const payload = data.payload as ILogin;\r\n        yield put(resetFeeds());\r\n        const resp = (yield authService.login(payload)).data;\r\n        // store token, update store and redirect to dashboard page\r\n        yield authService.setToken(resp.token, payload?.remember);\r\n        const userResp = yield userService.me();\r\n\r\n        yield put(updateCurrentUser(userResp.data));\r\n        // yield put(loginSuccess(userResp.data));\r\n        yield put(updateModals({ isLoginModalOpen: false }));\r\n\r\n        userResp?.data && userResp.data?.isUpdateProfile ? Router.push('/home') : Router.push('/model/account');\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        if(error?.statusCode === 404){\r\n          message.error('This account does not appear to exist. Please sign up to get started.');\r\n        } else {\r\n          message.error(error?.message || 'Incorrect credentials!');\r\n          yield put(loginFail(error));\r\n        }\r\n       \r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: loginSocial,\r\n    * worker(data: any) {\r\n      try {\r\n        const payload = data.payload as any;\r\n        const { token } = payload;\r\n        yield authService.setToken(token);\r\n        const userResp = yield userService.me();\r\n        yield put(updateCurrentUser(userResp.data));\r\n        yield put(loginSuccess());\r\n        if (!userResp?.data?.isPerformer) {\r\n          Router.push((!userResp.data.email || !userResp.data.username) ? '/user/account' : '/home');\r\n        }\r\n        if (userResp?.data?.isPerformer) {\r\n          (!userResp.data.email || !userResp.data.username) ? Router.push('/model/account') : Router.push({ pathname: '/model/profile', query: { username: userResp.data.username || userResp.data._id } }, `/${userResp.data.username || userResp.data._id}`);\r\n        }\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error?.message || 'Incorrect credentials!');\r\n        yield put(loginFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: registerFan,\r\n    * worker(data: any) {\r\n      try {\r\n        const payload = data.payload as IFanRegister;\r\n        const resp = (yield authService.register(payload)).data;\r\n        const store = storeHolder.getStore();\r\n        store.dispatch(\r\n          updateModals({\r\n            isLoginModalOpen: true,\r\n            isRegisterModalOpen: false,\r\n          })\r\n        )\r\n        message.success(resp?.message || 'Sign up success!', 10);\r\n        yield put(registerFanSuccess(resp));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error?.message || 'This Username or email address has been already taken.', 5);\r\n        yield put(registerFanFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: registerPerformer,\r\n    * worker(data: any) {\r\n      try {\r\n        const verificationFiles = [{\r\n          fieldname: 'idVerification',\r\n          file: data.payload.idVerificationFile\r\n        }, {\r\n          fieldname: 'documentVerification',\r\n          file: data.payload.documentVerificationFile\r\n        }];\r\n        const payload = pick(data.payload, ['name', 'username', 'password',\r\n          'gender', 'email', 'firstName', 'lastName', 'country', 'dateOfBirth']);\r\n        const resp = (yield authService.registerPerformer(verificationFiles, payload, () => { })).data;\r\n        yield put(registerPerformerSuccess(resp));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        message.error(error.message || 'An error occured, please try again later');\r\n        yield put(registerPerformerFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: logout,\r\n    * worker() {\r\n      window.location.replace(\"/home\");\r\n      yield authService.removeToken();\r\n    }\r\n  },\r\n  {\r\n    on: forgot,\r\n    * worker(data: any) {\r\n      try {\r\n        const payload = data.payload as IForgot;\r\n        const resp = (yield authService.resetPassword(payload)).data;\r\n        message.success(\r\n          'We\\'ve sent an email to reset your password, please check your inbox.',\r\n          10\r\n        );\r\n        yield put(forgotSuccess(resp));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        message.error((error && error.message) || 'Something went wrong. Please try again later', 5);\r\n        yield put(forgotFail(error));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: getCurrentUser,\r\n    * worker() {\r\n      try {\r\n        const userResp = yield userService.me();\r\n        yield put(updateCurrentUser(userResp.data));\r\n      } catch (e) {\r\n        const error = yield Promise.resolve(e);\r\n        // eslint-disable-next-line no-console\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport default flatten([createSagas(authSagas)]);\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,IAAI,QAAQ,QAAQ;AACtC,SAASC,GAAG,QAAQ,oBAAoB;AACxC,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAOC,MAAM,MAAM,aAAa;AAChC,SAASC,WAAW,EAAEC,WAAW,QAAQ,cAAc;AAIvD,SAASC,OAAO,QAAQ,MAAM;AAE9B,SAASC,iBAAiB,QAAQ,iBAAiB;AACnD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SACEC,WAAW,EACXC,KAAK,EACLC,YAAY,EACZC,MAAM,EACNC,SAAS,EACTC,eAAe,EACfC,WAAW,EACXC,kBAAkB,EAClBC,qBAAqB,EACrBC,iBAAiB,EACjBC,wBAAwB,EACxBC,MAAM,EACNC,aAAa,EACbC,UAAU,EACVC,cAAc,QACT,WAAW;AAElB,SAEEC,UAAU,QACL,iBAAiB;AACxB,OAAOC,WAAW,MAAM,kBAAkB;AAE1C,MAAMC,SAAS,GAAG,CAChB;EACEC,EAAE,EAAEjB,KAAK;EACT,CAAEkB,MAAMA,CAACC,IAAS,EAAE;IAClB,IAAI;MAAA,IAAAC,cAAA;MACF,MAAMC,OAAO,GAAGF,IAAI,CAACE,OAAiB;MACtC,MAAM9B,GAAG,CAACuB,UAAU,CAAC,CAAC,CAAC;MACvB,MAAMQ,IAAI,GAAG,CAAC,MAAM5B,WAAW,CAACM,KAAK,CAACqB,OAAO,CAAC,EAAEF,IAAI;MACpD;MACA,MAAMzB,WAAW,CAAC6B,QAAQ,CAACD,IAAI,CAACE,KAAK,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,QAAQ,CAAC;MACzD,MAAMC,QAAQ,GAAG,MAAM/B,WAAW,CAACgC,EAAE,CAAC,CAAC;MAEvC,MAAMpC,GAAG,CAACM,iBAAiB,CAAC6B,QAAQ,CAACP,IAAI,CAAC,CAAC;MAC3C;MACA,MAAM5B,GAAG,CAACO,YAAY,CAAC;QAAE8B,gBAAgB,EAAE;MAAM,CAAC,CAAC,CAAC;MAEpDF,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEP,IAAI,KAAAC,cAAA,GAAIM,QAAQ,CAACP,IAAI,cAAAC,cAAA,eAAbA,cAAA,CAAeS,eAAe,GAAGpC,MAAM,CAACqC,IAAI,CAAC,OAAO,CAAC,GAAGrC,MAAM,CAACqC,IAAI,CAAC,gBAAgB,CAAC;IACzG,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC,IAAG,CAAAC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEG,UAAU,MAAK,GAAG,EAAC;QAC3BvC,OAAO,CAACoC,KAAK,CAAC,uEAAuE,CAAC;MACxF,CAAC,MAAM;QACLpC,OAAO,CAACoC,KAAK,CAAC,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEpC,OAAO,KAAI,wBAAwB,CAAC;QACzD,MAAML,GAAG,CAACY,SAAS,CAAC6B,KAAK,CAAC,CAAC;MAC7B;IAEF;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAElB,WAAW;EACf,CAAEmB,MAAMA,CAACC,IAAS,EAAE;IAClB,IAAI;MAAA,IAAAiB,eAAA,EAAAC,eAAA;MACF,MAAMhB,OAAO,GAAGF,IAAI,CAACE,OAAc;MACnC,MAAM;QAAEG;MAAM,CAAC,GAAGH,OAAO;MACzB,MAAM3B,WAAW,CAAC6B,QAAQ,CAACC,KAAK,CAAC;MACjC,MAAME,QAAQ,GAAG,MAAM/B,WAAW,CAACgC,EAAE,CAAC,CAAC;MACvC,MAAMpC,GAAG,CAACM,iBAAiB,CAAC6B,QAAQ,CAACP,IAAI,CAAC,CAAC;MAC3C,MAAM5B,GAAG,CAACU,YAAY,CAAC,CAAC,CAAC;MACzB,IAAI,EAACyB,QAAQ,aAARA,QAAQ,gBAAAU,eAAA,GAARV,QAAQ,CAAEP,IAAI,cAAAiB,eAAA,eAAdA,eAAA,CAAgBE,WAAW,GAAE;QAChC7C,MAAM,CAACqC,IAAI,CAAE,CAACJ,QAAQ,CAACP,IAAI,CAACoB,KAAK,IAAI,CAACb,QAAQ,CAACP,IAAI,CAACqB,QAAQ,GAAI,eAAe,GAAG,OAAO,CAAC;MAC5F;MACA,IAAId,QAAQ,aAARA,QAAQ,gBAAAW,eAAA,GAARX,QAAQ,CAAEP,IAAI,cAAAkB,eAAA,eAAdA,eAAA,CAAgBC,WAAW,EAAE;QAC9B,CAACZ,QAAQ,CAACP,IAAI,CAACoB,KAAK,IAAI,CAACb,QAAQ,CAACP,IAAI,CAACqB,QAAQ,GAAI/C,MAAM,CAACqC,IAAI,CAAC,gBAAgB,CAAC,GAAGrC,MAAM,CAACqC,IAAI,CAAC;UAAEW,QAAQ,EAAE,gBAAgB;UAAEC,KAAK,EAAE;YAAEF,QAAQ,EAAEd,QAAQ,CAACP,IAAI,CAACqB,QAAQ,IAAId,QAAQ,CAACP,IAAI,CAACwB;UAAI;QAAE,CAAC,EAAE,IAAIjB,QAAQ,CAACP,IAAI,CAACqB,QAAQ,IAAId,QAAQ,CAACP,IAAI,CAACwB,GAAG,EAAE,CAAC;MACtP;IACF,CAAC,CAAC,OAAOZ,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtCnC,OAAO,CAACoC,KAAK,CAAC,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEpC,OAAO,KAAI,wBAAwB,CAAC;MACzD,MAAML,GAAG,CAACY,SAAS,CAAC6B,KAAK,CAAC,CAAC;IAC7B;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEZ,WAAW;EACf,CAAEa,MAAMA,CAACC,IAAS,EAAE;IAClB,IAAI;MACF,MAAME,OAAO,GAAGF,IAAI,CAACE,OAAuB;MAC5C,MAAMC,IAAI,GAAG,CAAC,MAAM5B,WAAW,CAACkD,QAAQ,CAACvB,OAAO,CAAC,EAAEF,IAAI;MACvD,MAAM0B,KAAK,GAAG9B,WAAW,CAAC+B,QAAQ,CAAC,CAAC;MACpCD,KAAK,CAACE,QAAQ,CACZjD,YAAY,CAAC;QACX8B,gBAAgB,EAAE,IAAI;QACtBoB,mBAAmB,EAAE;MACvB,CAAC,CACH,CAAC;MACDpD,OAAO,CAACqD,OAAO,CAAC,CAAA3B,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE1B,OAAO,KAAI,kBAAkB,EAAE,EAAE,CAAC;MACxD,MAAML,GAAG,CAACe,kBAAkB,CAACgB,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOS,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtCnC,OAAO,CAACoC,KAAK,CAAC,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEpC,OAAO,KAAI,wDAAwD,EAAE,CAAC,CAAC;MAC5F,MAAML,GAAG,CAACa,eAAe,CAAC4B,KAAK,CAAC,CAAC;IACnC;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAET,iBAAiB;EACrB,CAAEU,MAAMA,CAACC,IAAS,EAAE;IAClB,IAAI;MACF,MAAM+B,iBAAiB,GAAG,CAAC;QACzBC,SAAS,EAAE,gBAAgB;QAC3BC,IAAI,EAAEjC,IAAI,CAACE,OAAO,CAACgC;MACrB,CAAC,EAAE;QACDF,SAAS,EAAE,sBAAsB;QACjCC,IAAI,EAAEjC,IAAI,CAACE,OAAO,CAACiC;MACrB,CAAC,CAAC;MACF,MAAMjC,OAAO,GAAG/B,IAAI,CAAC6B,IAAI,CAACE,OAAO,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAChE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;MACxE,MAAMC,IAAI,GAAG,CAAC,MAAM5B,WAAW,CAACc,iBAAiB,CAAC0C,iBAAiB,EAAE7B,OAAO,EAAE,MAAM,CAAE,CAAC,CAAC,EAAEF,IAAI;MAC9F,MAAM5B,GAAG,CAACkB,wBAAwB,CAACa,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOS,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtCnC,OAAO,CAACoC,KAAK,CAACA,KAAK,CAACpC,OAAO,IAAI,0CAA0C,CAAC;MAC1E,MAAML,GAAG,CAACgB,qBAAqB,CAACyB,KAAK,CAAC,CAAC;IACzC;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEf,MAAM;EACV,CAAEgB,MAAMA,CAAA,EAAG;IACTqC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC,OAAO,CAAC;IAChC,MAAM/D,WAAW,CAACgE,WAAW,CAAC,CAAC;EACjC;AACF,CAAC,EACD;EACEzC,EAAE,EAAEP,MAAM;EACV,CAAEQ,MAAMA,CAACC,IAAS,EAAE;IAClB,IAAI;MACF,MAAME,OAAO,GAAGF,IAAI,CAACE,OAAkB;MACvC,MAAMC,IAAI,GAAG,CAAC,MAAM5B,WAAW,CAACiE,aAAa,CAACtC,OAAO,CAAC,EAAEF,IAAI;MAC5DvB,OAAO,CAACqD,OAAO,CACb,uEAAuE,EACvE,EACF,CAAC;MACD,MAAM1D,GAAG,CAACoB,aAAa,CAACW,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOS,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtCnC,OAAO,CAACoC,KAAK,CAAEA,KAAK,IAAIA,KAAK,CAACpC,OAAO,IAAK,8CAA8C,EAAE,CAAC,CAAC;MAC5F,MAAML,GAAG,CAACqB,UAAU,CAACoB,KAAK,CAAC,CAAC;IAC9B;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEJ,cAAc;EAClB,CAAEK,MAAMA,CAAA,EAAG;IACT,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAM/B,WAAW,CAACgC,EAAE,CAAC,CAAC;MACvC,MAAMpC,GAAG,CAACM,iBAAiB,CAAC6B,QAAQ,CAACP,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOY,CAAC,EAAE;MACV,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACH,CAAC,CAAC;MACtC;MACA6B,OAAO,CAACC,GAAG,CAAC7B,KAAK,CAAC;IACpB;EACF;AACF,CAAC,CACF;AAED,eAAe3C,OAAO,CAAC,CAACG,WAAW,CAACwB,SAAS,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}