{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { logout } from '@redux/auth/actions';\nimport { updateCurrentUser, updateUserSuccess, setUpdating, updateCurrentUserAvatar, updateUserFail, updatePasswordSuccess, updatePasswordFail, setUpdatingBanking, updateBanking, updateBankingSuccess, updateBankingFail, updateCurrentUserCover, updateBlockCountries, updateBalance, updateStatsView } from './actions';\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/static/no-avatar.png',\n    cover: null,\n    name: '',\n    email: ''\n  },\n  error: null,\n  updateSuccess: false,\n  updating: false\n};\nconst userReducers = [{\n  on: updateCurrentUser,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n}, {\n  on: updateCurrentUserAvatar,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        avatar: data.payload\n      })\n    });\n  }\n}, {\n  on: updateCurrentUserCover,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        cover: data.payload\n      })\n    });\n  }\n}, {\n  on: updateUserSuccess,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload,\n      updateSuccess: true,\n      error: null\n    });\n  }\n}, {\n  on: updateUserFail,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateUser: null,\n      updateSuccess: false,\n      error: data.payload\n    });\n  }\n}, {\n  on: setUpdating,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: data.payload\n    });\n  }\n}, {\n  on: updatePasswordSuccess,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: true,\n      updatedPassword: data.payload,\n      error: null\n    });\n  }\n}, {\n  on: updatePasswordFail,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: false,\n      updatedPassword: null,\n      error: data.payload\n    });\n  }\n},\n// Update banking\n// TODO add interface\n{\n  on: setUpdatingBanking,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: data.payload,\n      updateSuccess: false\n    });\n  }\n}, {\n  on: updateBanking,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: false,\n      updatedPassword: null,\n      error: data.payload\n    });\n  }\n}, {\n  on: updateBankingSuccess,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: true,\n      updatedBanking: data.payload,\n      current: _objectSpread(_objectSpread({}, state.current), {\n        bankingInformation: data.payload\n      }),\n      error: null,\n      updating: false\n    });\n  }\n}, {\n  on: updateBankingFail,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: false,\n      error: data.payload,\n      updating: false\n    });\n  }\n}, {\n  on: updateBlockCountries,\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {\n        blockCountries: data.payload\n      })\n    });\n  }\n}, {\n  on: updateBalance,\n  reducer(state, data) {\n    const {\n      token,\n      type\n    } = data.payload;\n    const dataState = _objectSpread({}, state);\n    const newState = type === 'ruby-balance' ? _objectSpread(_objectSpread({}, state.current), {}, {\n      rubyBalance: dataState.current.rubyBalance += token\n    }) : _objectSpread(_objectSpread({}, state.current), {}, {\n      balance: dataState.current.balance += token\n    });\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread({}, newState)\n    });\n  }\n}, {\n  on: updateStatsView,\n  reducer(state, data) {\n    const {\n      views\n    } = data.payload;\n    const dataState = _objectSpread({}, state);\n    const newState = _objectSpread(_objectSpread({}, state.current), {}, {\n      stats: _objectSpread(_objectSpread({}, dataState.current.stats), {}, {\n        views: dataState.current.stats.views += views\n      })\n    });\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread({}, newState)\n    });\n  }\n}, {\n  on: logout,\n  reducer() {\n    return _objectSpread({}, initialState);\n  }\n}];\nexport default merge({}, createReducers('user', [userReducers], initialState));","map":{"version":3,"names":["merge","createReducers","logout","updateCurrentUser","updateUserSuccess","setUpdating","updateCurrentUserAvatar","updateUserFail","updatePasswordSuccess","updatePasswordFail","setUpdatingBanking","updateBanking","updateBankingSuccess","updateBankingFail","updateCurrentUserCover","updateBlockCountries","updateBalance","updateStatsView","initialState","current","_id","avatar","cover","name","email","error","updateSuccess","updating","userReducers","on","reducer","state","data","_objectSpread","payload","updateUser","updatedPassword","updatedBanking","bankingInformation","blockCountries","token","type","dataState","newState","rubyBalance","balance","views","stats"],"sources":["C:/Users/Rokibul/Documents/case/src/redux/user/reducers.ts"],"sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction, IUser } from 'src/interfaces';\nimport { logout } from '@redux/auth/actions';\nimport {\n  updateCurrentUser,\n  updateUserSuccess,\n  setUpdating,\n  updateCurrentUserAvatar,\n  updateUserFail,\n  updatePasswordSuccess,\n  updatePasswordFail,\n  setUpdatingBanking,\n  updateBanking,\n  updateBankingSuccess,\n  updateBankingFail,\n  updateCurrentUserCover,\n  updateBlockCountries,\n  updateBalance,\n  updateStatsView\n} from './actions';\n\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/static/no-avatar.png',\n    cover: null,\n    name: '',\n    email: ''\n  },\n  error: null,\n  updateSuccess: false,\n  updating: false\n};\n\nconst userReducers = [\n  {\n    on: updateCurrentUser,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: data.payload\n      };\n    }\n  },\n  {\n    on: updateCurrentUserAvatar,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          avatar: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateCurrentUserCover,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          cover: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateUserSuccess,\n    reducer(state: any, data: IReduxAction<IUser>) {\n      return {\n        ...state,\n        current: data.payload,\n        updateSuccess: true,\n        error: null\n      };\n    }\n  },\n  {\n    on: updateUserFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateUser: null,\n        updateSuccess: false,\n        error: data.payload\n      };\n    }\n  },\n  {\n    on: setUpdating,\n    reducer(state: any, data: IReduxAction<boolean>) {\n      return {\n        ...state,\n        updating: data.payload\n      };\n    }\n  },\n  {\n    on: updatePasswordSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: true,\n        updatedPassword: data.payload,\n        error: null\n      };\n    }\n  },\n  {\n    on: updatePasswordFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: false,\n        updatedPassword: null,\n        error: data.payload\n      };\n    }\n  },\n  // Update banking\n  // TODO add interface\n  {\n    on: setUpdatingBanking,\n    reducer(state: any, data: IReduxAction<boolean>) {\n      return {\n        ...state,\n        updating: data.payload,\n        updateSuccess: false\n      };\n    }\n  },\n  {\n    on: updateBanking,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: false,\n        updatedPassword: null,\n        error: data.payload\n      };\n    }\n  },\n  {\n    on: updateBankingSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: true,\n        updatedBanking: data.payload,\n        current: { ...state.current, ...{ bankingInformation: data.payload } },\n        error: null,\n        updating: false\n      };\n    }\n  },\n  {\n    on: updateBankingFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: false,\n        error: data.payload,\n        updating: false\n      };\n    }\n  },\n  {\n    on: updateBlockCountries,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        current: { ...state.current, ...{ blockCountries: data.payload } }\n      };\n    }\n  },\n  {\n    on: updateBalance,\n    reducer(state: any, data: any) {\n      const { token, type } = data.payload;\n      const dataState = { ...state };\n      const newState = type === 'ruby-balance'\n        ? { ...state.current, rubyBalance: (dataState.current.rubyBalance += token) }\n        : { ...state.current, balance: (dataState.current.balance += token) };\n      return {\n        ...state,\n        current: { ...newState }\n      };\n    }\n  },\n  {\n    on: updateStatsView,\n    reducer(state: any, data: any) {\n      const { views } = data.payload;\n      const dataState = { ...state };\n      const newState = { ...state.current, stats: { ...dataState.current.stats, views: dataState.current.stats.views += views } };\n      return {\n        ...state,\n        current: { ...newState }\n      };\n    }\n  },\n  {\n    on: logout,\n    reducer() {\n      return {\n        ...initialState\n      };\n    }\n  }\n];\n\nexport default merge({}, createReducers('user', [userReducers], initialState));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}