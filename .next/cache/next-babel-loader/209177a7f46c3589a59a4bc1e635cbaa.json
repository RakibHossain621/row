{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rokibul\\\\Documents\\\\case\\\\src\\\\components\\\\user\\\\avatar-upload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* eslint-disable react/require-default-props */\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport { fileService } from '@services/file.service';\nexport class AvatarUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      loading: false,\n      uploading: false,\n      avatarUrl: '/static/no-avatar.png'\n    });\n    _defineProperty(this, \"beforeUpload\", file => {\n      const config = getGlobalConfig();\n      const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n      if (!isLt2M) {\n        message.error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n        return false;\n      }\n      return this.handleUploadAvatar(file);\n    });\n    _defineProperty(this, \"onPreview\", async file => {\n      let src = file.url;\n      if (!src) {\n        src = await new Promise(resolve => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file.originFileObj);\n          reader.onload = () => resolve(reader.result);\n        });\n      }\n      const image = new Image();\n      image.src = src;\n      const imgWindow = window.open(src);\n      imgWindow.document.write(image.outerHTML);\n    });\n    _defineProperty(this, \"handleUploadAvatar\", async file => {\n      try {\n        const {\n          user,\n          onFinish\n        } = this.props;\n        this.setState({\n          uploading: true\n        });\n        const resp = await performerService.uploadAvatarFiles(file, {\n          uploaderId: user._id\n        }, null);\n        const {\n          data: avatar\n        } = await fileService.getPublicInfo({\n          fileId: resp.fileId\n        });\n        if (avatar) {\n          await this.setState({\n            avatarUrl: avatar === null || avatar === void 0 ? void 0 : avatar.url\n          });\n          onFinish({\n            avatarId: resp.fileId,\n            avatar: avatar === null || avatar === void 0 ? void 0 : avatar.url\n          });\n        }\n      } catch (error) {\n        const errorMessage = Promise.resolve(error);\n        message.error(getResponseError(errorMessage) || 'Something went wrong');\n      } finally {\n        this.setState({\n          uploading: false\n        });\n      }\n    });\n  }\n  componentDidMount() {\n    const {\n      image\n    } = this.props;\n    if (image) {\n      this.setState({\n        avatarUrl: image\n      });\n    }\n  }\n  render() {\n    const {\n      loading,\n      uploading\n    } = this.state;\n    const {\n      avatarUrl\n    } = this.state;\n    const {\n      headers\n    } = this.props;\n    return __jsx(ImgCrop, {\n      rotate: true,\n      shape: \"round\",\n      quality: 1,\n      modalTitle: \"Edit Avatar\",\n      modalWidth: 767,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, __jsx(Upload, {\n      accept: \"image/*\",\n      name: \"avatar\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      beforeUpload: this.beforeUpload,\n      onPreview: this.onPreview,\n      headers: headers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, __jsx(\"img\", {\n      src: avatarUrl,\n      alt: \"avatar\",\n      style: {\n        width: '100%',\n        height: '100%',\n        maxWidth: 104,\n        maxHeight: 104\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }), loading || uploading ? __jsx(LoadingOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 37\n      }\n    }) : __jsx(CameraOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 59\n      }\n    })));\n  }\n}","map":{"version":3,"names":["PureComponent","Upload","message","LoadingOutlined","CameraOutlined","ImgCrop","getGlobalConfig","getResponseError","performerService","fileService","AvatarUpload","constructor","args","_defineProperty","loading","uploading","avatarUrl","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","handleUploadAvatar","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","user","onFinish","props","setState","resp","uploadAvatarFiles","uploaderId","_id","data","avatar","getPublicInfo","fileId","avatarId","errorMessage","componentDidMount","render","state","headers","__jsx","rotate","shape","quality","modalTitle","modalWidth","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","accept","name","listType","className","showUploadList","beforeUpload","onPreview","alt","style","width","height","maxWidth","maxHeight"],"sources":["C:/Users/Rokibul/Documents/case/src/components/user/avatar-upload.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport { IPerformer } from '@interfaces/performer';\nimport { fileService } from '@services/file.service';\n\ninterface IState {\n  loading: boolean;\n  avatarUrl: string;\n  uploading : boolean;\n}\n\ninterface IProps {\n  image?: string;\n  headers?: any;\n  onFinish: Function;\n  user: IPerformer;\n}\n\nexport class AvatarUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    uploading: false,\n    avatarUrl: '/static/no-avatar.png'\n  };\n\n  componentDidMount() {\n    const { image } = this.props;\n    if (image) {\n      this.setState({ avatarUrl: image });\n    }\n  }\n\nbeforeUpload = (file) => {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n  if (!isLt2M) {\n    message.error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n    return false;\n  }\n  return this.handleUploadAvatar(file);\n}\n\n  onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  handleUploadAvatar = async (file) => {\n    try {\n      const { user, onFinish } = this.props;\n      this.setState({ uploading: true });\n      const resp = await performerService.uploadAvatarFiles(file, { uploaderId: user._id }, null);\n      const { data: avatar } = await fileService.getPublicInfo({ fileId: resp.fileId });\n      if (avatar) {\n        await this.setState({ avatarUrl: avatar?.url });\n        onFinish({ avatarId: resp.fileId, avatar: avatar?.url });\n      }\n    } catch (error) {\n      const errorMessage = Promise.resolve(error);\n      message.error(getResponseError(errorMessage) || 'Something went wrong');\n    } finally {\n      this.setState({ uploading: false });\n    }\n  }\n\n  render() {\n    const { loading, uploading } = this.state;\n    const { avatarUrl } = this.state;\n    const { headers } = this.props;\n    return (\n      <ImgCrop rotate shape=\"round\" quality={1} modalTitle=\"Edit Avatar\" modalWidth={767}>\n        <Upload\n          accept=\"image/*\"\n          name=\"avatar\"\n          listType=\"picture-card\"\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          beforeUpload={this.beforeUpload}\n          onPreview={this.onPreview}\n          headers={headers}\n        >\n          <img\n            src={avatarUrl}\n            alt=\"avatar\"\n            style={{\n              width: '100%', height: '100%', maxWidth: 104, maxHeight: 104\n            }}\n          />\n          {(loading || uploading) ? <LoadingOutlined /> : <CameraOutlined />}\n        </Upload>\n      </ImgCrop>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}