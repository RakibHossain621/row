{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport moment from 'moment';\nimport { getResponseError } from '@lib/utils';\nimport { message } from 'antd';\nimport { APIRequest } from './api-request';\nclass StreamService extends APIRequest {\n  getSessionId(id, type) {\n    return this.get(`/streaming/session/${id}/${type}`);\n  }\n  goLive() {\n    return this.post('/streaming/live');\n  }\n  joinPublicChat(performerId) {\n    return this.post(`/streaming/join/${performerId}`);\n  }\n  requestPrivateChat(performerId) {\n    return this.post(`/streaming/private-chat/${performerId}`);\n  }\n  acceptPrivateChat(id) {\n    return this.get(`/streaming/private-chat/${id}`);\n  }\n  startGroupChat() {\n    return this.post('/streaming/group-chat');\n  }\n  joinGroupChat(id) {\n    return this.get(`/streaming/group-chat/${id}`);\n  }\n  generateOneTimeToken(data) {\n    return this.post('/streaming/token', data);\n  }\n  async getPublishToken(options, expireDate = moment().add(1, 'd').toDate().getTime()) {\n    try {\n      const {\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption\n      } = settings;\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'publish',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n  async getSubscriberToken(options, expireDate = moment().add(1, 'd').toDate().getTime()) {\n    try {\n      const {\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption\n      } = settings;\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n  async getLiveStreamOrVodURL(options, expireDate = moment().add(1, 'd').toDate().getTime(), _player = 'hls') {\n    // http://[IP_Address]/<Application_Name>/streams/streamID.mp4?token=tokenId\n    // http://[IP_Address]/<Application_Name>/streams/streamID.m3u8?token=tokenId\n    // http://[IP_Address]/<Application_Name>/play.html?name=streamID&playOrder=hls&token=tokenId\n    try {\n      // const src = `https://${viewerURL}:5443/${appName}/streams/${streamId}.m3u8${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n      // eslint-disable-next-line no-shadow\n      const {\n        appName,\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption,\n        viewerURL\n      } = settings;\n      const extension = _player === 'hls' ? 'm3u8' : 'mp4';\n      if (!viewerURL || !appName) {\n        return '';\n      }\n      let oneTimeToken = '';\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        oneTimeToken = resp.data.tokenId;\n      }\n      const {\n        protocol\n      } = window.location;\n      return `https://${viewerURL}/${appName}/streams/${streamId}.${extension}${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return '';\n    }\n  }\n  togglePrivateChatStatus() {\n    return this.put('/streaming/private-chat/toggle-status').then(resp => resp.data);\n  }\n  cancelPrivateChat(conversationId) {\n    return this.post(`/streaming/private-chat/cancel/${conversationId}`).then(resp => resp.data);\n  }\n  timeOutPrivateChat(conversationId, performerId) {\n    return this.post(`/streaming/private-chat/timeout/${conversationId}/${performerId}`).then(resp => resp.data);\n  }\n  getLiveStreaming(performerId) {\n    return this.get(`/streaming/live/${performerId}`);\n  }\n  adminRemoveStream(conversationId) {\n    return this.del(`/admin/streaming/remove/${conversationId}`);\n  }\n  getPublicStreams(isStreaming = true) {\n    return this.get(`/streaming/list/public?isStreaming=${isStreaming}`);\n  }\n}\nexport const streamService = new StreamService();","map":{"version":3,"names":["moment","getResponseError","message","APIRequest","StreamService","getSessionId","id","type","get","goLive","post","joinPublicChat","performerId","requestPrivateChat","acceptPrivateChat","startGroupChat","joinGroupChat","generateOneTimeToken","data","getPublishToken","options","expireDate","add","toDate","getTime","settings","streamId","secureOption","resp","tokenId","err","error","Promise","resolve","getSubscriberToken","getLiveStreamOrVodURL","_player","appName","viewerURL","extension","oneTimeToken","protocol","window","location","togglePrivateChatStatus","put","then","cancelPrivateChat","conversationId","timeOutPrivateChat","getLiveStreaming","adminRemoveStream","del","getPublicStreams","isStreaming","streamService"],"sources":["C:/Users/Rokibul/Documents/case/src/services/stream.service.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { IOneTimeToken, StreamSettings } from 'src/interfaces';\nimport moment from 'moment';\nimport { getResponseError } from '@lib/utils';\nimport { message } from 'antd';\nimport { APIRequest } from './api-request';\n\nclass StreamService extends APIRequest {\n  getSessionId(id: string, type: string) {\n    return this.get(`/streaming/session/${id}/${type}`);\n  }\n\n  goLive() {\n    return this.post('/streaming/live');\n  }\n\n  joinPublicChat(performerId: string) {\n    return this.post(`/streaming/join/${performerId}`);\n  }\n\n  requestPrivateChat(performerId: string) {\n    return this.post(`/streaming/private-chat/${performerId}`);\n  }\n\n  acceptPrivateChat(id: string) {\n    return this.get(`/streaming/private-chat/${id}`);\n  }\n\n  startGroupChat() {\n    return this.post('/streaming/group-chat');\n  }\n\n  joinGroupChat(id: string) {\n    return this.get(`/streaming/group-chat/${id}`);\n  }\n\n  generateOneTimeToken(data: IOneTimeToken) {\n    return this.post('/streaming/token', data);\n  }\n\n  async getPublishToken(\n    options: {\n      streamId: string;\n      settings: StreamSettings;\n    },\n    expireDate = moment().add(1, 'd').toDate().getTime()\n  ): Promise<string> {\n    try {\n      const { settings, streamId } = options;\n      const { secureOption } = settings;\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'publish',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getSubscriberToken(\n    options: {\n      streamId: string;\n      settings: StreamSettings;\n    },\n    expireDate = moment().add(1, 'd').toDate().getTime()\n  ): Promise<string> {\n    try {\n      const { settings, streamId } = options;\n      const { secureOption } = settings;\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getLiveStreamOrVodURL(\n    options: {\n      streamId: string;\n      settings: StreamSettings;\n      appName: string;\n    },\n    expireDate = moment().add(1, 'd').toDate().getTime(),\n    _player = 'hls'\n  ) {\n    // http://[IP_Address]/<Application_Name>/streams/streamID.mp4?token=tokenId\n    // http://[IP_Address]/<Application_Name>/streams/streamID.m3u8?token=tokenId\n    // http://[IP_Address]/<Application_Name>/play.html?name=streamID&playOrder=hls&token=tokenId\n    try {\n      // const src = `https://${viewerURL}:5443/${appName}/streams/${streamId}.m3u8${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n      // eslint-disable-next-line no-shadow\n      const { appName, settings, streamId } = options;\n      const { secureOption, viewerURL } = settings;\n      const extension = _player === 'hls' ? 'm3u8' : 'mp4';\n      if (!viewerURL || !appName) {\n        return '';\n      }\n\n      let oneTimeToken = '';\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        oneTimeToken = resp.data.tokenId;\n      }\n\n      const { protocol } = window.location;\n      return `https://${viewerURL}/${appName}/streams/${streamId}.${extension}${oneTimeToken ? `?token=${oneTimeToken}` : ''\n      }`;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return '';\n    }\n  }\n\n  togglePrivateChatStatus() {\n    return this.put('/streaming/private-chat/toggle-status').then((resp) => resp.data);\n  }\n\n  cancelPrivateChat(conversationId: string) {\n    return this.post(`/streaming/private-chat/cancel/${conversationId}`).then((resp) => resp.data);\n  }\n\n  timeOutPrivateChat(conversationId: string, performerId: string) {\n    return this.post(`/streaming/private-chat/timeout/${conversationId}/${performerId}`).then((resp) => resp.data);\n  }\n\n  public getLiveStreaming(performerId: string) {\n    return this.get(`/streaming/live/${performerId}`);\n  }\n\n  adminRemoveStream(conversationId: string) {\n    return this.del(`/admin/streaming/remove/${conversationId}`);\n  }\n  getPublicStreams(isStreaming: Boolean = true) {\n    return this.get(`/streaming/list/public?isStreaming=${isStreaming}`);\n  }\n}\n\nexport const streamService = new StreamService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}