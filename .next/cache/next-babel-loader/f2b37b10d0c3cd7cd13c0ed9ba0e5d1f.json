{"ast":null,"code":"/* eslint-disable no-console */\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, loadMoreStreamMessages, loadMoreStreamMessagesSuccess, loadStreamMessages, loadStreamMessagesSuccess, sendStreamMessage, sendStreamMessageSuccess, deleteMessage, deleteMessageSuccess, deleteMessageFail, muteUser, muteUserSuccess, muteUserFail, loadMuteUsers, loadMuteUsersSuccess, loadMuteUsersFail } from './actions';\nconst streamMessageSagas = [{\n  on: getStreamConversation,\n  *worker(data) {\n    try {\n      const {\n        conversation\n      } = data.payload;\n      const {\n        type\n      } = conversation;\n      const resp = type === 'stream_public' ? yield messageService.findPublicConversationPerformer(conversation.performerId) : yield messageService.getConversationByStreamId(conversation.streamId);\n      if (resp && resp.data) {\n        yield put(getStreamConversationSuccess({\n          data: resp.data\n        }));\n        yield put(loadStreamMessages({\n          conversationId: resp.data._id,\n          limit: 25,\n          offset: 0,\n          type\n        }));\n      }\n    } catch (e) {\n      // load error\n      console.log('err-get-conversation', e);\n    }\n  }\n}, {\n  on: loadStreamMessages,\n  *worker(data) {\n    try {\n      const {\n        conversationId,\n        offset,\n        limit\n      } = data.payload;\n      yield put(fetchingStreamMessage({\n        conversationId\n      }));\n      const resp = yield messageService.getPublicMessages(conversationId, {\n        offset,\n        limit\n      });\n      yield put(loadStreamMessagesSuccess({\n        conversationId,\n        items: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (e) {\n      // load error\n      console.log('err', e);\n    }\n  }\n}, {\n  on: loadMoreStreamMessages,\n  *worker(data) {\n    try {\n      const messageMap = select(state => state.streamMessage.messages);\n      const {\n        conversationId,\n        offset,\n        limit\n      } = data.payload;\n      if (messageMap && messageMap.fetching) {\n        return;\n      }\n      yield put(fetchingStreamMessage({\n        conversationId\n      }));\n      const resp = yield messageService.getPublicMessages(conversationId, {\n        offset,\n        limit\n      });\n      yield put(loadMoreStreamMessagesSuccess({\n        conversationId,\n        items: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (e) {\n      // load error\n      message.error('Error occured, please try again later');\n      console.log('err', e);\n    }\n  }\n}, {\n  on: sendStreamMessage,\n  *worker(req) {\n    try {\n      const {\n        conversationId,\n        data\n      } = req.payload;\n      const resp = yield messageService.sendStreamMessage(conversationId, data);\n      yield put(sendStreamMessageSuccess(resp.data));\n    } catch (e) {\n      yield put(sendStreamMessageSuccess(e));\n    }\n  }\n}, {\n  on: deleteMessage,\n  *worker(req) {\n    try {\n      const {\n        messageId\n      } = req.payload;\n      const resp = yield messageService.deleteMessage(messageId);\n      yield put(deleteMessageSuccess(resp.data));\n    } catch (e) {\n      yield put(deleteMessageFail(e));\n    }\n  }\n}, {\n  on: muteUser,\n  *worker(req) {\n    try {\n      const {\n        conversationId,\n        performerId,\n        userId\n      } = req.payload;\n      const resp = yield messageService.muteUser(conversationId, {\n        performerId,\n        userId\n      });\n      yield put(muteUserSuccess(resp.data));\n    } catch (e) {\n      yield put(muteUserFail(e));\n    }\n  }\n}, {\n  on: loadMuteUsers,\n  *worker(req) {\n    try {\n      const {\n        performerId\n      } = req.payload;\n      const resp = yield messageService.loadMuteUsers(performerId);\n      yield put(loadMuteUsersSuccess(resp.data));\n    } catch (e) {\n      yield put(loadMuteUsersFail(e));\n    }\n  }\n}];\nexport default flatten([createSagas(streamMessageSagas)]);","map":{"version":3,"names":["flatten","put","select","createSagas","messageService","message","getStreamConversation","getStreamConversationSuccess","fetchingStreamMessage","loadMoreStreamMessages","loadMoreStreamMessagesSuccess","loadStreamMessages","loadStreamMessagesSuccess","sendStreamMessage","sendStreamMessageSuccess","deleteMessage","deleteMessageSuccess","deleteMessageFail","muteUser","muteUserSuccess","muteUserFail","loadMuteUsers","loadMuteUsersSuccess","loadMuteUsersFail","streamMessageSagas","on","worker","data","conversation","payload","type","resp","findPublicConversationPerformer","performerId","getConversationByStreamId","streamId","conversationId","_id","limit","offset","e","console","log","getPublicMessages","items","total","messageMap","state","streamMessage","messages","fetching","error","req","messageId","userId"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/stream-chat/sagas.ts"],"sourcesContent":["/* eslint-disable no-console */\r\nimport { flatten } from 'lodash';\r\nimport { put, select } from 'redux-saga/effects';\r\nimport { createSagas } from '@lib/redux';\r\nimport { messageService } from '@services/message.service';\r\nimport { IReduxAction } from 'src/interfaces';\r\nimport { message } from 'antd';\r\nimport {\r\n  getStreamConversation,\r\n  getStreamConversationSuccess,\r\n  fetchingStreamMessage,\r\n  loadMoreStreamMessages,\r\n  loadMoreStreamMessagesSuccess,\r\n  loadStreamMessages,\r\n  loadStreamMessagesSuccess,\r\n  sendStreamMessage,\r\n  sendStreamMessageSuccess,\r\n  deleteMessage,\r\n  deleteMessageSuccess,\r\n  deleteMessageFail,\r\n  muteUser,\r\n  muteUserSuccess,\r\n  muteUserFail,\r\n  loadMuteUsers,\r\n  loadMuteUsersSuccess,\r\n  loadMuteUsersFail\r\n} from './actions';\r\n\r\nconst streamMessageSagas = [\r\n  {\r\n    on: getStreamConversation,\r\n    * worker(data: IReduxAction<Record<string, any>>) {\r\n      try {\r\n        const { conversation } = data.payload;\r\n        const { type } = conversation;\r\n        const resp = type === 'stream_public'\r\n          ? yield messageService.findPublicConversationPerformer(\r\n            conversation.performerId\r\n          )\r\n          : yield messageService.getConversationByStreamId(\r\n            conversation.streamId\r\n          );\r\n        if (resp && resp.data) {\r\n          yield put(getStreamConversationSuccess({ data: resp.data }));\r\n          yield put(\r\n            loadStreamMessages({\r\n              conversationId: resp.data._id,\r\n              limit: 25,\r\n              offset: 0,\r\n              type\r\n            })\r\n          );\r\n        }\r\n      } catch (e) {\r\n        // load error\r\n        console.log('err-get-conversation', e);\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: loadStreamMessages,\r\n    * worker(data: IReduxAction<Record<string, any>>) {\r\n      try {\r\n        const {\r\n          conversationId, offset, limit\r\n        } = data.payload;\r\n        yield put(fetchingStreamMessage({ conversationId }));\r\n        const resp = yield messageService.getPublicMessages(conversationId, {\r\n          offset,\r\n          limit\r\n        });\r\n        yield put(\r\n          loadStreamMessagesSuccess({\r\n            conversationId,\r\n            items: resp.data.data,\r\n            total: resp.data.total\r\n          })\r\n        );\r\n      } catch (e) {\r\n        // load error\r\n        console.log('err', e);\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: loadMoreStreamMessages,\r\n    * worker(data: IReduxAction<Record<string, any>>) {\r\n      try {\r\n        const messageMap = select(\r\n          (state) => state.streamMessage.messages\r\n        ) as any;\r\n        const {\r\n          conversationId, offset, limit\r\n        } = data.payload;\r\n        if (messageMap && messageMap.fetching) {\r\n          return;\r\n        }\r\n\r\n        yield put(fetchingStreamMessage({ conversationId }));\r\n        const resp = yield messageService.getPublicMessages(conversationId, {\r\n          offset,\r\n          limit\r\n        });\r\n        yield put(\r\n          loadMoreStreamMessagesSuccess({\r\n            conversationId,\r\n            items: resp.data.data,\r\n            total: resp.data.total\r\n          })\r\n        );\r\n      } catch (e) {\r\n        // load error\r\n        message.error('Error occured, please try again later');\r\n        console.log('err', e);\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: sendStreamMessage,\r\n    * worker(req: IReduxAction<any>) {\r\n      try {\r\n        const { conversationId, data } = req.payload;\r\n        const resp = yield messageService.sendStreamMessage(conversationId, data);\r\n\r\n        yield put(sendStreamMessageSuccess(resp.data));\r\n      } catch (e) {\r\n        yield put(sendStreamMessageSuccess(e));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: deleteMessage,\r\n    * worker(req: IReduxAction<any>) {\r\n      try {\r\n        const { messageId } = req.payload;\r\n        const resp = yield messageService.deleteMessage(messageId);\r\n        yield put(deleteMessageSuccess(resp.data));\r\n      } catch (e) {\r\n        yield put(deleteMessageFail(e));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: muteUser,\r\n    * worker(req: IReduxAction<any>) {\r\n      try {\r\n        const { conversationId, performerId, userId } = req.payload;\r\n        const resp = yield messageService.muteUser(conversationId, { performerId, userId });\r\n        yield put(muteUserSuccess(resp.data));\r\n      } catch (e) {\r\n        yield put(muteUserFail(e));\r\n      }\r\n    }\r\n  },\r\n  {\r\n    on: loadMuteUsers,\r\n    * worker(req: IReduxAction<any>) {\r\n      try {\r\n        const { performerId } = req.payload;\r\n        const resp = yield messageService.loadMuteUsers(performerId);\r\n        yield put(loadMuteUsersSuccess(resp.data));\r\n      } catch (e) {\r\n        yield put(loadMuteUsersFail(e));\r\n      }\r\n    }\r\n  }\r\n];\r\n\r\nexport default flatten([createSagas(streamMessageSagas)]);\r\n"],"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,QAAQ;AAChC,SAASC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAChD,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,QAAQ,MAAM;AAC9B,SACEC,qBAAqB,EACrBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,sBAAsB,EACtBC,6BAA6B,EAC7BC,kBAAkB,EAClBC,yBAAyB,EACzBC,iBAAiB,EACjBC,wBAAwB,EACxBC,aAAa,EACbC,oBAAoB,EACpBC,iBAAiB,EACjBC,QAAQ,EACRC,eAAe,EACfC,YAAY,EACZC,aAAa,EACbC,oBAAoB,EACpBC,iBAAiB,QACZ,WAAW;AAElB,MAAMC,kBAAkB,GAAG,CACzB;EACEC,EAAE,EAAEnB,qBAAqB;EACzB,CAAEoB,MAAMA,CAACC,IAAuC,EAAE;IAChD,IAAI;MACF,MAAM;QAAEC;MAAa,CAAC,GAAGD,IAAI,CAACE,OAAO;MACrC,MAAM;QAAEC;MAAK,CAAC,GAAGF,YAAY;MAC7B,MAAMG,IAAI,GAAGD,IAAI,KAAK,eAAe,GACjC,MAAM1B,cAAc,CAAC4B,+BAA+B,CACpDJ,YAAY,CAACK,WACf,CAAC,GACC,MAAM7B,cAAc,CAAC8B,yBAAyB,CAC9CN,YAAY,CAACO,QACf,CAAC;MACH,IAAIJ,IAAI,IAAIA,IAAI,CAACJ,IAAI,EAAE;QACrB,MAAM1B,GAAG,CAACM,4BAA4B,CAAC;UAAEoB,IAAI,EAAEI,IAAI,CAACJ;QAAK,CAAC,CAAC,CAAC;QAC5D,MAAM1B,GAAG,CACPU,kBAAkB,CAAC;UACjByB,cAAc,EAAEL,IAAI,CAACJ,IAAI,CAACU,GAAG;UAC7BC,KAAK,EAAE,EAAE;UACTC,MAAM,EAAE,CAAC;UACTT;QACF,CAAC,CACH,CAAC;MACH;IACF,CAAC,CAAC,OAAOU,CAAC,EAAE;MACV;MACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,CAAC,CAAC;IACxC;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEd,kBAAkB;EACtB,CAAEe,MAAMA,CAACC,IAAuC,EAAE;IAChD,IAAI;MACF,MAAM;QACJS,cAAc;QAAEG,MAAM;QAAED;MAC1B,CAAC,GAAGX,IAAI,CAACE,OAAO;MAChB,MAAM5B,GAAG,CAACO,qBAAqB,CAAC;QAAE4B;MAAe,CAAC,CAAC,CAAC;MACpD,MAAML,IAAI,GAAG,MAAM3B,cAAc,CAACuC,iBAAiB,CAACP,cAAc,EAAE;QAClEG,MAAM;QACND;MACF,CAAC,CAAC;MACF,MAAMrC,GAAG,CACPW,yBAAyB,CAAC;QACxBwB,cAAc;QACdQ,KAAK,EAAEb,IAAI,CAACJ,IAAI,CAACA,IAAI;QACrBkB,KAAK,EAAEd,IAAI,CAACJ,IAAI,CAACkB;MACnB,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAOL,CAAC,EAAE;MACV;MACAC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,CAAC,CAAC;IACvB;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEhB,sBAAsB;EAC1B,CAAEiB,MAAMA,CAACC,IAAuC,EAAE;IAChD,IAAI;MACF,MAAMmB,UAAU,GAAG5C,MAAM,CACtB6C,KAAK,IAAKA,KAAK,CAACC,aAAa,CAACC,QACjC,CAAQ;MACR,MAAM;QACJb,cAAc;QAAEG,MAAM;QAAED;MAC1B,CAAC,GAAGX,IAAI,CAACE,OAAO;MAChB,IAAIiB,UAAU,IAAIA,UAAU,CAACI,QAAQ,EAAE;QACrC;MACF;MAEA,MAAMjD,GAAG,CAACO,qBAAqB,CAAC;QAAE4B;MAAe,CAAC,CAAC,CAAC;MACpD,MAAML,IAAI,GAAG,MAAM3B,cAAc,CAACuC,iBAAiB,CAACP,cAAc,EAAE;QAClEG,MAAM;QACND;MACF,CAAC,CAAC;MACF,MAAMrC,GAAG,CACPS,6BAA6B,CAAC;QAC5B0B,cAAc;QACdQ,KAAK,EAAEb,IAAI,CAACJ,IAAI,CAACA,IAAI;QACrBkB,KAAK,EAAEd,IAAI,CAACJ,IAAI,CAACkB;MACnB,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAOL,CAAC,EAAE;MACV;MACAnC,OAAO,CAAC8C,KAAK,CAAC,uCAAuC,CAAC;MACtDV,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,CAAC,CAAC;IACvB;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEZ,iBAAiB;EACrB,CAAEa,MAAMA,CAAC0B,GAAsB,EAAE;IAC/B,IAAI;MACF,MAAM;QAAEhB,cAAc;QAAET;MAAK,CAAC,GAAGyB,GAAG,CAACvB,OAAO;MAC5C,MAAME,IAAI,GAAG,MAAM3B,cAAc,CAACS,iBAAiB,CAACuB,cAAc,EAAET,IAAI,CAAC;MAEzE,MAAM1B,GAAG,CAACa,wBAAwB,CAACiB,IAAI,CAACJ,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOa,CAAC,EAAE;MACV,MAAMvC,GAAG,CAACa,wBAAwB,CAAC0B,CAAC,CAAC,CAAC;IACxC;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEV,aAAa;EACjB,CAAEW,MAAMA,CAAC0B,GAAsB,EAAE;IAC/B,IAAI;MACF,MAAM;QAAEC;MAAU,CAAC,GAAGD,GAAG,CAACvB,OAAO;MACjC,MAAME,IAAI,GAAG,MAAM3B,cAAc,CAACW,aAAa,CAACsC,SAAS,CAAC;MAC1D,MAAMpD,GAAG,CAACe,oBAAoB,CAACe,IAAI,CAACJ,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOa,CAAC,EAAE;MACV,MAAMvC,GAAG,CAACgB,iBAAiB,CAACuB,CAAC,CAAC,CAAC;IACjC;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEP,QAAQ;EACZ,CAAEQ,MAAMA,CAAC0B,GAAsB,EAAE;IAC/B,IAAI;MACF,MAAM;QAAEhB,cAAc;QAAEH,WAAW;QAAEqB;MAAO,CAAC,GAAGF,GAAG,CAACvB,OAAO;MAC3D,MAAME,IAAI,GAAG,MAAM3B,cAAc,CAACc,QAAQ,CAACkB,cAAc,EAAE;QAAEH,WAAW;QAAEqB;MAAO,CAAC,CAAC;MACnF,MAAMrD,GAAG,CAACkB,eAAe,CAACY,IAAI,CAACJ,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOa,CAAC,EAAE;MACV,MAAMvC,GAAG,CAACmB,YAAY,CAACoB,CAAC,CAAC,CAAC;IAC5B;EACF;AACF,CAAC,EACD;EACEf,EAAE,EAAEJ,aAAa;EACjB,CAAEK,MAAMA,CAAC0B,GAAsB,EAAE;IAC/B,IAAI;MACF,MAAM;QAAEnB;MAAY,CAAC,GAAGmB,GAAG,CAACvB,OAAO;MACnC,MAAME,IAAI,GAAG,MAAM3B,cAAc,CAACiB,aAAa,CAACY,WAAW,CAAC;MAC5D,MAAMhC,GAAG,CAACqB,oBAAoB,CAACS,IAAI,CAACJ,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOa,CAAC,EAAE;MACV,MAAMvC,GAAG,CAACsB,iBAAiB,CAACiB,CAAC,CAAC,CAAC;IACjC;EACF;AACF,CAAC,CACF;AAED,eAAexC,OAAO,CAAC,CAACG,WAAW,CAACqB,kBAAkB,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}