{"ast":null,"code":"import moment from 'moment';\nexport function formatDate(date) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MMM/DD/YYYY';\n  return moment(date).format(format);\n}\nexport function formatDateFromnow(date) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MMM-DD-YYYY';\n  if (moment().diff(moment(date), 'years') > 0) {\n    return moment(date).format(format);\n  }\n  return moment(date).fromNow();\n}\nexport function dobToAge(date) {\n  return moment().diff(moment(date), 'years') > 0 && \"\".concat(moment().diff(moment(date), 'years'), \"+\");\n}\nexport function formatLocaleDate(dateString) {\n  var date = new Date(dateString);\n  return date.toLocaleDateString('pt-BR', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\nexport function formatDateNew(date) {\n  var d = new Date(date);\n  var month = String(d.getMonth() + 1).padStart(2, '0');\n  var day = String(d.getDate()).padStart(2, '0');\n  var year = d.getFullYear();\n  return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n}\nexport function formatDateToMMMDDYYYY(dateInput) {\n  if (!dateInput) {\n    throw new Error(\"Invalid date input. Please provide a valid Date object or a valid date string.\");\n  }\n  var date = new Date(dateInput);\n  if (isNaN(date.getTime())) {\n    throw new Error(\"Invalid date input. Unable to parse the date.\");\n  }\n  var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  var day = String(date.getDate()).padStart(2, \"0\");\n  var month = months[date.getMonth()];\n  var year = date.getFullYear();\n  return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n}","map":{"version":3,"names":["moment","formatDate","date","format","arguments","length","undefined","formatDateFromnow","diff","fromNow","dobToAge","concat","formatLocaleDate","dateString","Date","toLocaleDateString","day","month","year","formatDateNew","d","String","getMonth","padStart","getDate","getFullYear","formatDateToMMMDDYYYY","dateInput","Error","isNaN","getTime","months"],"sources":["C:/Users/roman/Pictures/Case/row/src/lib/date.ts"],"sourcesContent":["import moment from 'moment';\r\n\r\nexport function formatDate(date: Date, format = 'MMM/DD/YYYY') {\r\n  return moment(date).format(format);\r\n}\r\n\r\nexport function formatDateFromnow(date: Date, format = 'MMM-DD-YYYY') {\r\n  if (moment().diff(moment(date), 'years') > 0) { return moment(date).format(format); }\r\n  return moment(date).fromNow();\r\n}\r\n\r\nexport function dobToAge(date: Date) {\r\n  return (\r\n    moment().diff(moment(date), 'years') > 0\r\n    && `${moment().diff(moment(date), 'years')}+`\r\n  );\r\n}\r\n\r\nexport function formatLocaleDate(dateString: string) {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString('pt-BR', {\r\n    day: '2-digit', \r\n    month: '2-digit', \r\n    year: 'numeric'\r\n  });\r\n}\r\n\r\nexport function formatDateNew(date) {\r\n  const d = new Date(date);\r\n  const month = String(d.getMonth() + 1).padStart(2, '0'); \r\n  const day = String(d.getDate()).padStart(2, '0'); \r\n  const year = d.getFullYear();\r\n\r\n  return `${month}/${day}/${year}`;\r\n}\r\n\r\nexport function formatDateToMMMDDYYYY(dateInput:string) {\r\n  if (!dateInput) {\r\n    throw new Error(\"Invalid date input. Please provide a valid Date object or a valid date string.\");\r\n  }\r\n\r\n  const date = new Date(dateInput);\r\n  if (isNaN(date.getTime())) {\r\n    throw new Error(\"Invalid date input. Unable to parse the date.\");\r\n  }\r\n\r\n  const months = [\r\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n  ];\r\n\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  const month = months[date.getMonth()];\r\n  const year = date.getFullYear();\r\n\r\n  return `${month}/${day}/${year}`;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}