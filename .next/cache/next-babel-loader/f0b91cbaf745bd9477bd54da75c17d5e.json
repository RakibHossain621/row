{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport var MessageService = /*#__PURE__*/function (_APIRequest) {\n  function MessageService() {\n    _classCallCheck(this, MessageService);\n    return _callSuper(this, MessageService, arguments);\n  }\n  _inherits(MessageService, _APIRequest);\n  return _createClass(MessageService, [{\n    key: \"getConversations\",\n    value: function getConversations(query) {\n      return this.get(this.buildUrl('/conversations', query));\n    }\n  }, {\n    key: \"searchConversations\",\n    value: function searchConversations(query) {\n      return this.get(this.buildUrl('/conversations/search', query));\n    }\n  }, {\n    key: \"createConversation\",\n    value: function createConversation(data) {\n      return this.post('/conversations', data);\n    }\n  }, {\n    key: \"getConversationDetail\",\n    value: function getConversationDetail(id) {\n      return this.get(\"/conversations/\".concat(id));\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages(conversationId, query) {\n      return this.get(this.buildUrl(\"/messages/conversations/\".concat(conversationId), query));\n    }\n  }, {\n    key: \"loadMuteUsers\",\n    value: function loadMuteUsers(query) {\n      return this.get(this.buildUrl('/messages/mute-users', query));\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(conversationId, data) {\n      return this.post(\"/messages/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"countTotalNotRead\",\n    value: function countTotalNotRead() {\n      return this.get('/messages/counting-not-read-messages');\n    }\n  }, {\n    key: \"readAllInConversation\",\n    value: function readAllInConversation(conversationId) {\n      return this.post(\"/messages/read-all/\".concat(conversationId));\n    }\n  }, {\n    key: \"getMessageUploadUrl\",\n    value: function getMessageUploadUrl() {\n      var config = getGlobalConfig();\n      return \"\".concat(config.NEXT_PUBLIC_API_ENDPOINT, \"/messages/private/file\");\n    }\n  }, {\n    key: \"getConversationByStreamId\",\n    value: function getConversationByStreamId(streamId) {\n      return this.get(\"/conversations/stream/\".concat(streamId));\n    }\n  }, {\n    key: \"getPublicMessages\",\n    value: function getPublicMessages(conversationId, query) {\n      return this.get(this.buildUrl(\"/messages/conversations/public/\".concat(conversationId), query));\n    }\n  }, {\n    key: \"sendStreamMessage\",\n    value: function sendStreamMessage(conversationId, data) {\n      return this.post(\"/messages/stream/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"sendPublicStreamMessage\",\n    value: function sendPublicStreamMessage(conversationId, data) {\n      return this.post(\"/messages/stream/public/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"findPublicConversationPerformer\",\n    value: function findPublicConversationPerformer(performerId) {\n      return this.get(\"/conversations/stream/public/\".concat(performerId));\n    }\n  }, {\n    key: \"deleteMessage\",\n    value: function deleteMessage(id) {\n      return this.del(\"/messages/\".concat(id));\n    }\n  }, {\n    key: \"deleteAllMessageInConversation\",\n    value: function deleteAllMessageInConversation(conversationId) {\n      return this.del(\"/messages/\".concat(conversationId, \"/remove-all-message\"));\n    }\n  }, {\n    key: \"updateConversationName\",\n    value: function updateConversationName(conversationId, data) {\n      return this.put(\"/conversations/\".concat(conversationId, \"/update\"), data);\n    }\n  }, {\n    key: \"muteUser\",\n    value: function muteUser(conversationId, data) {\n      return this.post(\"/messages/mute-user/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"checkMuteUser\",\n    value: function checkMuteUser(performerId) {\n      return this.get(this.buildUrl(\"/messages/check-mute-chat/\".concat(performerId)));\n    }\n  }, {\n    key: \"unMuteUser\",\n    value: function unMuteUser(id) {\n      return this.del(\"/messages/mute-user/\".concat(id));\n    }\n  }, {\n    key: \"deleteConversation\",\n    value: function deleteConversation(conversationId) {\n      return this.del(\"/conversations/\".concat(conversationId));\n    }\n  }]);\n}(APIRequest);\nexport var messageService = new MessageService();","map":{"version":3,"names":["APIRequest","getGlobalConfig","MessageService","_APIRequest","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","getConversations","query","get","buildUrl","searchConversations","createConversation","data","post","getConversationDetail","id","concat","getMessages","conversationId","loadMuteUsers","sendMessage","countTotalNotRead","readAllInConversation","getMessageUploadUrl","config","NEXT_PUBLIC_API_ENDPOINT","getConversationByStreamId","streamId","getPublicMessages","sendStreamMessage","sendPublicStreamMessage","findPublicConversationPerformer","performerId","deleteMessage","del","deleteAllMessageInConversation","updateConversationName","put","muteUser","checkMuteUser","unMuteUser","deleteConversation","messageService"],"sources":["C:/Users/roman/Pictures/Case/row/src/services/message.service.ts"],"sourcesContent":["import { APIRequest } from './api-request';\r\nimport { getGlobalConfig } from './config';\r\n\r\nexport class MessageService extends APIRequest {\r\n  getConversations(query?: Record<string, any>) {\r\n    return this.get(this.buildUrl('/conversations', query));\r\n  }\r\n\r\n  searchConversations(query?: Record<string, any>) {\r\n    return this.get(this.buildUrl('/conversations/search', query));\r\n  }\r\n\r\n  createConversation(data: Record<string, string>) {\r\n    return this.post('/conversations', data);\r\n  }\r\n\r\n  getConversationDetail(id: string) {\r\n    return this.get(`/conversations/${id}`);\r\n  }\r\n\r\n  getMessages(conversationId: string, query?: Record<string, any>) {\r\n    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));\r\n  }\r\n\r\n  loadMuteUsers(query?: Record<string, any>) {\r\n    return this.get(this.buildUrl('/messages/mute-users', query));\r\n  }\r\n\r\n  sendMessage(conversationId: string, data: Record<string, any>) {\r\n    return this.post(`/messages/conversations/${conversationId}`, data);\r\n  }\r\n\r\n  countTotalNotRead() {\r\n    return this.get('/messages/counting-not-read-messages');\r\n  }\r\n\r\n  readAllInConversation(conversationId: string) {\r\n    return this.post(`/messages/read-all/${conversationId}`);\r\n  }\r\n\r\n  getMessageUploadUrl() {\r\n    const config = getGlobalConfig();\r\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;\r\n  }\r\n\r\n  getConversationByStreamId(streamId: string) {\r\n    return this.get(`/conversations/stream/${streamId}`);\r\n  }\r\n\r\n  getPublicMessages(conversationId: string, query?: Record<string, any>) {\r\n    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));\r\n  }\r\n\r\n  sendStreamMessage(conversationId: string, data: Record<string, any>) {\r\n    return this.post(`/messages/stream/conversations/${conversationId}`, data);\r\n  }\r\n\r\n  sendPublicStreamMessage(conversationId: string, data: Record<string, any>) {\r\n    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);\r\n  }\r\n\r\n  findPublicConversationPerformer(performerId: string) {\r\n    return this.get(`/conversations/stream/public/${performerId}`);\r\n  }\r\n\r\n  deleteMessage(id) {\r\n    return this.del(`/messages/${id}`);\r\n  }\r\n\r\n  deleteAllMessageInConversation(conversationId) {\r\n    return this.del(`/messages/${conversationId}/remove-all-message`);\r\n  }\r\n\r\n  updateConversationName(conversationId, data) {\r\n    return this.put(`/conversations/${conversationId}/update`, data);\r\n  }\r\n\r\n  muteUser(conversationId, data) {\r\n    return this.post(`/messages/mute-user/${conversationId}`, data);\r\n  }\r\n\r\n  checkMuteUser(performerId) {\r\n    return this.get(this.buildUrl(`/messages/check-mute-chat/${performerId}`));\r\n  }\r\n\r\n  unMuteUser(id) {\r\n    return this.del((`/messages/mute-user/${id}`));\r\n  }\r\n\r\n  deleteConversation(conversationId) {\r\n    return this.del(`/conversations/${conversationId}`);\r\n  }\r\n}\r\n\r\nexport const messageService = new MessageService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}