{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rokibul\\\\Documents\\\\case\\\\src\\\\components\\\\common\\\\recaptcha.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { PureComponent, createRef } from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { utilsService } from '@services/index';\nexport class GoogleReCaptcha extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"recaptchaRef\", void 0);\n  }\n  componentDidMount() {\n    if (!this.recaptchaRef) {\n      this.recaptchaRef = /*#__PURE__*/createRef();\n    }\n  }\n  async handleVerifyCapcha(token) {\n    const {\n      handleVerify\n    } = this.props;\n    if (token) {\n      const resp = await utilsService.verifyRecaptcha(token);\n      handleVerify(resp);\n    } else {\n      handleVerify({\n        success: false\n      });\n    }\n  }\n  render() {\n    const {\n      settings\n    } = this.props;\n    if (!this.recaptchaRef) {\n      this.recaptchaRef = /*#__PURE__*/createRef();\n    }\n    return __jsx(\"div\", {\n      className: \"recaptcha-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, (settings === null || settings === void 0 ? void 0 : settings.enableGoogleReCaptcha) && __jsx(ReCAPTCHA, {\n      ref: this.recaptchaRef,\n      sitekey: settings === null || settings === void 0 ? void 0 : settings.googleReCaptchaSiteKey,\n      onChange: this.handleVerifyCapcha.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"names":["PureComponent","createRef","ReCAPTCHA","utilsService","GoogleReCaptcha","constructor","args","_defineProperty","componentDidMount","recaptchaRef","handleVerifyCapcha","token","handleVerify","props","resp","verifyRecaptcha","success","render","settings","__jsx","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","enableGoogleReCaptcha","ref","sitekey","googleReCaptchaSiteKey","onChange","bind"],"sources":["C:/Users/Rokibul/Documents/case/src/components/common/recaptcha.tsx"],"sourcesContent":["import { PureComponent, createRef } from 'react';\nimport { ISettings } from 'src/interfaces';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { utilsService } from '@services/index';\n\ninterface IProps {\n  settings: ISettings;\n  handleVerify: Function;\n}\n\nexport class GoogleReCaptcha extends PureComponent<IProps> {\n  recaptchaRef: any;\n\n  componentDidMount() {\n    if (!this.recaptchaRef) {\n      this.recaptchaRef = createRef();\n    }\n  }\n\n  async handleVerifyCapcha(token: string) {\n    const { handleVerify } = this.props;\n    if (token) {\n      const resp = await utilsService.verifyRecaptcha(token);\n      handleVerify(resp);\n    } else {\n      handleVerify({ success: false });\n    }\n  }\n\n  render() {\n    const { settings } = this.props;\n    if (!this.recaptchaRef) {\n      this.recaptchaRef = createRef();\n    }\n    return (\n      <div className=\"recaptcha-box\">\n        {settings?.enableGoogleReCaptcha && (\n        <ReCAPTCHA\n          ref={this.recaptchaRef}\n          sitekey={settings?.googleReCaptchaSiteKey}\n          onChange={this.handleVerifyCapcha.bind(this)}\n        />\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,OAAO;AAEhD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,YAAY,QAAQ,iBAAiB;AAO9C,OAAO,MAAMC,eAAe,SAASJ,aAAa,CAAS;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAAC,eAAA;EAAA;EAGzDC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,gBAAGR,SAAS,CAAC,CAAC;IACjC;EACF;EAEA,MAAMS,kBAAkBA,CAACC,KAAa,EAAE;IACtC,MAAM;MAAEC;IAAa,CAAC,GAAG,IAAI,CAACC,KAAK;IACnC,IAAIF,KAAK,EAAE;MACT,MAAMG,IAAI,GAAG,MAAMX,YAAY,CAACY,eAAe,CAACJ,KAAK,CAAC;MACtDC,YAAY,CAACE,IAAI,CAAC;IACpB,CAAC,MAAM;MACLF,YAAY,CAAC;QAAEI,OAAO,EAAE;MAAM,CAAC,CAAC;IAClC;EACF;EAEAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC;IAAS,CAAC,GAAG,IAAI,CAACL,KAAK;IAC/B,IAAI,CAAC,IAAI,CAACJ,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,gBAAGR,SAAS,CAAC,CAAC;IACjC;IACA,OACEkB,KAAA;MAAKC,SAAS,EAAC,eAAe;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC3B,CAAAR,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAES,qBAAqB,KAChCR,KAAA,CAACjB,SAAS;MACR0B,GAAG,EAAE,IAAI,CAACnB,YAAa;MACvBoB,OAAO,EAAEX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEY,sBAAuB;MAC1CC,QAAQ,EAAE,IAAI,CAACrB,kBAAkB,CAACsB,IAAI,CAAC,IAAI,CAAE;MAAAX,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAC9C,CAEE,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module"}