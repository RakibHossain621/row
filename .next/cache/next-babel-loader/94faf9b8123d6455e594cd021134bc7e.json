{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { merge, findIndex } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, sendStreamMessage, sendStreamMessageSuccess, sendStreamMessageFail, receiveStreamMessageSuccess, loadMoreStreamMessagesSuccess, loadStreamMessagesSuccess, resetMuteStreamMessage, resetStreamMessage, resetAllStreamMessage, deleteMessageSuccess, muteUserSuccess, muteUserFail } from './actions';\nvar initialMessageState = {\n  activeConversation: {},\n  sendMessage: {\n    sending: false\n  },\n  muteMessage: {\n    sending: false,\n    success: false\n  },\n  receiveMessage: {},\n  conversationMap: {}\n};\nvar streamMessageReducer = [{\n  on: getStreamConversation,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {\n        fetching: true\n      }\n    });\n  }\n}, {\n  on: getStreamConversationSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {\n        fetching: false,\n        data: data.payload.data\n      }\n    });\n  }\n}, {\n  on: fetchingStreamMessage,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var conversationId = data.payload.conversationId;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadStreamMessagesSuccess,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var _data$payload = data.payload,\n      conversationId = _data$payload.conversationId,\n      items = _data$payload.items,\n      total = _data$payload.total;\n    conversationMap[conversationId] = {\n      items: _toConsumableArray(items.reverse()),\n      total: total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadMoreStreamMessagesSuccess,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var _data$payload2 = data.payload,\n      conversationId = _data$payload2.conversationId,\n      items = _data$payload2.items,\n      total = _data$payload2.total;\n    conversationMap[conversationId] = {\n      items: [].concat(_toConsumableArray(items.reverse()), _toConsumableArray(conversationMap[conversationId].items || [])),\n      total: total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: sendStreamMessage,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true,\n        success: false,\n        data: null\n      }\n    });\n  }\n}, {\n  on: sendStreamMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n}, {\n  on: sendStreamMessageFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n}, {\n  on: receiveStreamMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n    var conversationId = data.payload.conversationId;\n    if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\n      nextState.conversationMap[conversationId] = {\n        items: []\n      };\n    }\n    nextState.conversationMap[conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n}, {\n  on: resetStreamMessage,\n  reducer: function reducer(state) {\n    var nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      activeConversation: {},\n      sendMessage: {\n        sending: false\n      },\n      receiveMessage: {},\n      conversationMap: {}\n    });\n  }\n}, {\n  on: resetMuteStreamMessage,\n  reducer: function reducer(state) {\n    var nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      muteMessage: {\n        sending: false,\n        success: false\n      }\n    });\n  }\n}, {\n  on: resetAllStreamMessage,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n    var conversationId = data.payload.conversationId;\n    nextState.conversationMap[conversationId] = {\n      items: []\n    };\n    return _objectSpread({}, nextState);\n  }\n}, {\n  on: deleteMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n    var _data$payload3 = data.payload,\n      conversationId = _data$payload3.conversationId,\n      _id = _data$payload3._id;\n    if (nextState.conversationMap[conversationId] && nextState.conversationMap[conversationId].items) {\n      var i = findIndex(nextState.conversationMap[conversationId].items, function (item) {\n        return item && item._id === _id;\n      });\n      nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\n      nextState.conversationMap[conversationId].items[i].isDeleted = true;\n    }\n    return _objectSpread({}, nextState);\n  }\n}, {\n  on: muteUserSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      muteMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n}, {\n  on: muteUserFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      muteMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n}];\nexport default merge({}, createReducers('streamMessage', [streamMessageReducer], initialMessageState));","map":{"version":3,"names":["merge","findIndex","createReducers","getStreamConversation","getStreamConversationSuccess","fetchingStreamMessage","sendStreamMessage","sendStreamMessageSuccess","sendStreamMessageFail","receiveStreamMessageSuccess","loadMoreStreamMessagesSuccess","loadStreamMessagesSuccess","resetMuteStreamMessage","resetStreamMessage","resetAllStreamMessage","deleteMessageSuccess","muteUserSuccess","muteUserFail","initialMessageState","activeConversation","sendMessage","sending","muteMessage","success","receiveMessage","conversationMap","streamMessageReducer","on","reducer","state","_objectSpread","fetching","data","payload","conversationId","_data$payload","items","total","_toConsumableArray","reverse","_data$payload2","concat","nextState","error","push","_data$payload3","_id","i","item","text","isDeleted"],"sources":["C:/Users/roman/Pictures/Case/row/src/redux/stream-chat/reducers.ts"],"sourcesContent":["import { merge, findIndex } from 'lodash';\r\nimport { createReducers } from '@lib/redux';\r\nimport { IReduxAction } from 'src/interfaces';\r\nimport {\r\n  getStreamConversation,\r\n  getStreamConversationSuccess,\r\n  fetchingStreamMessage,\r\n  sendStreamMessage,\r\n  sendStreamMessageSuccess,\r\n  sendStreamMessageFail,\r\n  receiveStreamMessageSuccess,\r\n  loadMoreStreamMessagesSuccess,\r\n  loadStreamMessagesSuccess,\r\n  resetMuteStreamMessage,\r\n  resetStreamMessage,\r\n  resetAllStreamMessage,\r\n  deleteMessageSuccess,\r\n  muteUserSuccess,\r\n  muteUserFail\r\n} from './actions';\r\n\r\nconst initialMessageState = {\r\n  activeConversation: {\r\n  },\r\n  sendMessage: {\r\n    sending: false\r\n  },\r\n  muteMessage: {\r\n    sending: false,\r\n    success: false\r\n  },\r\n  receiveMessage: {},\r\n  conversationMap: {}\r\n};\r\n\r\nconst streamMessageReducer = [\r\n  {\r\n    on: getStreamConversation,\r\n    reducer(state: any) {\r\n      return {\r\n        ...state,\r\n        activeConversation: { fetching: true }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: getStreamConversationSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      return {\r\n        ...state,\r\n        activeConversation: {\r\n          fetching: false,\r\n          data: data.payload.data\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: fetchingStreamMessage,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { conversationMap } = state;\r\n      const { conversationId } = data.payload;\r\n      conversationMap[conversationId] = {\r\n        ...conversationMap[conversationId],\r\n        fetching: true\r\n      };\r\n      return { ...state };\r\n    }\r\n  },\r\n  {\r\n    on: loadStreamMessagesSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { conversationMap } = state;\r\n      const { conversationId, items, total } = data.payload;\r\n      conversationMap[conversationId] = {\r\n        items: [...items.reverse()],\r\n        total,\r\n        fetching: false\r\n      };\r\n      return { ...state };\r\n    }\r\n  },\r\n  {\r\n    on: loadMoreStreamMessagesSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const { conversationMap } = state;\r\n      const { conversationId, items, total } = data.payload;\r\n      conversationMap[conversationId] = {\r\n        items: [\r\n          ...items.reverse(),\r\n          ...conversationMap[conversationId].items || []\r\n        ],\r\n        total,\r\n        fetching: false\r\n      };\r\n      return { ...state };\r\n    }\r\n  },\r\n  {\r\n    on: sendStreamMessage,\r\n    reducer(state: any) {\r\n      return {\r\n        ...state,\r\n        sendMessage: {\r\n          sending: true,\r\n          success: false,\r\n          data: null\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: sendStreamMessageSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        sendMessage: {\r\n          sending: false,\r\n          success: true,\r\n          data: data.payload\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: sendStreamMessageFail,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      return {\r\n        ...state,\r\n        sendMessage: {\r\n          sending: false,\r\n          success: false,\r\n          error: data.payload\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: receiveStreamMessageSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      const { conversationId } = data.payload;\r\n      if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\r\n        nextState.conversationMap[conversationId] = {\r\n          items: []\r\n        };\r\n      }\r\n      nextState.conversationMap[conversationId].items.push(\r\n        data.payload\r\n      );\r\n      return {\r\n        ...nextState,\r\n        receiveMessage: data.payload\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: resetStreamMessage,\r\n    reducer(state: any) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        activeConversation: {},\r\n        sendMessage: {\r\n          sending: false\r\n        },\r\n        receiveMessage: {},\r\n        conversationMap: {}\r\n      };\r\n    }\r\n  },\r\n\r\n  {\r\n    on: resetMuteStreamMessage,\r\n    reducer(state: any) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        muteMessage: {\r\n          sending: false,\r\n          success: false\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: resetAllStreamMessage,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      const { conversationId } = data.payload;\r\n      nextState.conversationMap[conversationId] = {\r\n        items: []\r\n      };\r\n      return {\r\n        ...nextState\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: deleteMessageSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      const { conversationId, _id } = data.payload;\r\n      if (nextState.conversationMap[conversationId] && nextState.conversationMap[conversationId].items) {\r\n        const i = findIndex(nextState.conversationMap[conversationId].items, (item: any) => item && item._id === _id);\r\n        nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\r\n        nextState.conversationMap[conversationId].items[i].isDeleted = true;\r\n      }\r\n      return {\r\n        ...nextState\r\n      };\r\n    }\r\n  },\r\n\r\n  {\r\n    on: muteUserSuccess,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      const nextState = { ...state };\r\n      return {\r\n        ...nextState,\r\n        muteMessage: {\r\n          sending: false,\r\n          success: true,\r\n          data: data.payload\r\n        }\r\n      };\r\n    }\r\n  },\r\n  {\r\n    on: muteUserFail,\r\n    reducer(state: any, data: IReduxAction<any>) {\r\n      return {\r\n        ...state,\r\n        muteMessage: {\r\n          sending: false,\r\n          success: false,\r\n          error: data.payload\r\n        }\r\n      };\r\n    }\r\n  }\r\n];\r\n\r\nexport default merge(\r\n  {},\r\n  createReducers('streamMessage', [streamMessageReducer], initialMessageState)\r\n);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}