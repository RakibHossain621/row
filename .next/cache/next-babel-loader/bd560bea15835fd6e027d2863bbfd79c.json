{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roman\\\\Pictures\\\\Case\\\\row\\\\src\\\\components\\\\create-feed\\\\create-thumbnail-video-preview.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { generateVideoThumbnails } from '@rajesh896/video-thumbnails-generator';\nimport { Spin } from 'antd';\nimport { useEffect, useState } from 'react';\nexport const CreateThumbnailVideoPreview = ({\n  videoPreviewUrl,\n  videoFile,\n  handleThumbnail\n}) => {\n  const {\n    0: thumbnailImages,\n    1: setThumbnailImages\n  } = useState([]);\n  const {\n    0: selectedThumbnail,\n    1: setSelectedThumbnail\n  } = useState(null);\n  const {\n    0: selectedIndexProgress,\n    1: setSeletedIndexProgress\n  } = useState(0);\n  const handleGenerateThumbnailsFromVideoFile = () => {\n    generateVideoThumbnails(videoFile, 30, videoFile.type).then(thumbnailArray => {\n      // Process each base64 thumbnail to convert it into a File object\n      const thumbnails = thumbnailArray.map((thumbBase64, index) => {\n        const byteString = atob(thumbBase64.split(',')[1]);\n        const mimeString = thumbBase64.split(',')[0].split(':')[1].split(';')[0];\n        const ab = new ArrayBuffer(byteString.length);\n        const ia = new Uint8Array(ab);\n        for (let i = 0; i < byteString.length; i++) {\n          ia[i] = byteString.charCodeAt(i);\n        }\n        const blob = new Blob([ab], {\n          type: mimeString\n        });\n        const file = new File([blob], `thumbnail_${index}.png`, {\n          type: mimeString\n        });\n        return {\n          imgUrl: thumbBase64,\n          imgFile: file\n        };\n      });\n      setThumbnailImages(thumbnails);\n      setSelectedThumbnail(thumbnails[0]);\n    }).catch(err => {\n      console.error('Error generating thumbnails:', err);\n    });\n  };\n  useEffect(() => {\n    handleGenerateThumbnailsFromVideoFile();\n  }, [videoPreviewUrl, videoFile]);\n  useEffect(() => {\n    selectedThumbnail && handleThumbnail(selectedThumbnail.imgFile);\n  }, [selectedThumbnail]);\n  useEffect(() => {\n    setSelectedThumbnail(thumbnailImages[selectedIndexProgress]);\n  }, [selectedIndexProgress]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"w-full bg-gray-200 relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, selectedThumbnail ? __jsx(React.Fragment, null, __jsx(\"img\", {\n    src: selectedThumbnail.imgUrl,\n    alt: 'Thumbnail Selected',\n    className: \"w-full max-w-[260px] m-auto rounded\",\n    style: {\n      aspectRatio: '4 / 6',\n      objectFit: 'cover'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    className: \"w-full max-w-[380px] m-auto absolute left-0 right-0 bottom-4 progressBarThumbnail\",\n    type: \"range\",\n    max: thumbnailImages.length - 1,\n    onChange: e => setSeletedIndexProgress(Number(e.target.value)),\n    value: selectedIndexProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  })) : __jsx(\"video\", {\n    style: {\n      aspectRatio: '4 / 6',\n      objectFit: 'cover'\n    },\n    className: \"w-full max-w-[260px] m-auto rounded\",\n    src: videoPreviewUrl,\n    controls: true,\n    autoPlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"w-full pl-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(\"h4\", {\n    className: \"text-black pb-2 pt-4 bg-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Select a thumbnail by moving the slider\"), __jsx(\"div\", {\n    className: \"flex items-center justify-start w-full bg-white overflow-x-scroll pb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, !thumbnailImages.length && __jsx(Spin, {\n    className: \"m-auto pt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 39\n    }\n  }), thumbnailImages.map((thumbImg, index) => __jsx(\"div\", {\n    key: index,\n    onClick: () => setSelectedThumbnail(thumbImg),\n    className: `h-32 w-32 flex-none bg-black rounded cursor-pointer ${thumbImg === selectedThumbnail ? 'border-2 border-blue-800' : ''}`,\n    style: {\n      backgroundImage: `url(${thumbImg.imgUrl})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  })))));\n};","map":{"version":3,"names":["generateVideoThumbnails","Spin","useEffect","useState","CreateThumbnailVideoPreview","videoPreviewUrl","videoFile","handleThumbnail","thumbnailImages","setThumbnailImages","selectedThumbnail","setSelectedThumbnail","selectedIndexProgress","setSeletedIndexProgress","handleGenerateThumbnailsFromVideoFile","type","then","thumbnailArray","thumbnails","map","thumbBase64","index","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","blob","Blob","file","File","imgUrl","imgFile","catch","err","console","error","__jsx","React","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","aspectRatio","objectFit","max","onChange","e","Number","target","value","controls","autoPlay","thumbImg","key","onClick","backgroundImage","backgroundSize","backgroundPosition"],"sources":["C:/Users/roman/Pictures/Case/row/src/components/create-feed/create-thumbnail-video-preview.tsx"],"sourcesContent":["import { generateVideoThumbnails } from '@rajesh896/video-thumbnails-generator'\r\nimport { Spin } from 'antd'\r\nimport { useEffect, useState } from 'react'\r\n\r\ninterface ThumbnailImagesCollectionType {\r\n  imgUrl: string\r\n  imgFile: File\r\n}\r\n\r\nexport const CreateThumbnailVideoPreview = ({\r\n  videoPreviewUrl,\r\n  videoFile,\r\n  handleThumbnail\r\n}: {\r\n  videoPreviewUrl: string,\r\n  videoFile: File,\r\n  handleThumbnail: (thumbFile: File) => void\r\n}) => {\r\n  const [thumbnailImages, setThumbnailImages] = useState<ThumbnailImagesCollectionType[]>([])\r\n  const [selectedThumbnail, setSelectedThumbnail] = useState<ThumbnailImagesCollectionType | null>(null)\r\n\r\n  const [selectedIndexProgress, setSeletedIndexProgress] = useState(0)\r\n\r\n  const handleGenerateThumbnailsFromVideoFile = () => {\r\n    generateVideoThumbnails(videoFile, 30, videoFile.type)\r\n      .then((thumbnailArray) => {\r\n        // Process each base64 thumbnail to convert it into a File object\r\n        const thumbnails = thumbnailArray.map((thumbBase64: string, index: number) => {\r\n          const byteString = atob(thumbBase64.split(',')[1])\r\n          const mimeString = thumbBase64.split(',')[0].split(':')[1].split(';')[0]\r\n\r\n          const ab = new ArrayBuffer(byteString.length)\r\n          const ia = new Uint8Array(ab)\r\n\r\n          for (let i = 0; i < byteString.length; i++) {\r\n            ia[i] = byteString.charCodeAt(i)\r\n          }\r\n\r\n          const blob = new Blob([ab], { type: mimeString })\r\n          const file = new File([blob], `thumbnail_${index}.png`, { type: mimeString })\r\n\r\n          return {\r\n            imgUrl: thumbBase64,\r\n            imgFile: file\r\n          }\r\n        })\r\n\r\n        setThumbnailImages(thumbnails)\r\n        setSelectedThumbnail(thumbnails[0])\r\n      })\r\n      .catch((err) => {\r\n        console.error('Error generating thumbnails:', err)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleGenerateThumbnailsFromVideoFile()\r\n  }, [videoPreviewUrl, videoFile])\r\n\r\n  useEffect(() => {\r\n    selectedThumbnail && handleThumbnail(selectedThumbnail.imgFile)\r\n  }, [selectedThumbnail])\r\n\r\n  useEffect(() => {\r\n    setSelectedThumbnail(thumbnailImages[selectedIndexProgress])\r\n  }, [selectedIndexProgress])\r\n\r\n  return (\r\n    <>\r\n      <div className='w-full bg-gray-200 relative'>\r\n        {selectedThumbnail \r\n          ? <>\r\n            <img \r\n              src={selectedThumbnail.imgUrl}\r\n              alt={'Thumbnail Selected'}\r\n              className='w-full max-w-[260px] m-auto rounded'\r\n              style={{aspectRatio: '4 / 6', objectFit: 'cover'}} \r\n            />\r\n            <input className='w-full max-w-[380px] m-auto absolute left-0 right-0 bottom-4 progressBarThumbnail' type=\"range\" max={thumbnailImages.length - 1} onChange={(e) => setSeletedIndexProgress(Number(e.target.value))} value={selectedIndexProgress} />\r\n          </>\r\n          : <video style={{ aspectRatio: '4 / 6', objectFit: 'cover' }} className='w-full max-w-[260px] m-auto rounded' src={videoPreviewUrl} controls autoPlay />\r\n        }\r\n      </div>\r\n      <div className='w-full pl-2'>  \r\n        <h4 className='text-black pb-2 pt-4 bg-white'>Select a thumbnail by moving the slider</h4>\r\n        <div className='flex items-center justify-start w-full bg-white overflow-x-scroll pb-4'>\r\n          {!thumbnailImages.length && <Spin className='m-auto pt-2' />}\r\n          {thumbnailImages.map((thumbImg, index) => (\r\n            <div\r\n              key={index}\r\n              onClick={() => setSelectedThumbnail(thumbImg)}\r\n              className={`h-32 w-32 flex-none bg-black rounded cursor-pointer ${thumbImg === selectedThumbnail ? 'border-2 border-blue-800' : ''}`}\r\n              style={{ backgroundImage: `url(${thumbImg.imgUrl})`, backgroundSize: 'cover', backgroundPosition: 'center' }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}