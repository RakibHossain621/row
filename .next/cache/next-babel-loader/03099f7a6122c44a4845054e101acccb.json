{"ast":null,"code":"import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport class MessageService extends APIRequest {\n  getConversations(query) {\n    return this.get(this.buildUrl('/conversations', query));\n  }\n  searchConversations(query) {\n    return this.get(this.buildUrl('/conversations/search', query));\n  }\n  createConversation(data) {\n    return this.post('/conversations', data);\n  }\n  getConversationDetail(id) {\n    return this.get(`/conversations/${id}`);\n  }\n  getMessages(conversationId, query) {\n    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));\n  }\n  loadMuteUsers(query) {\n    return this.get(this.buildUrl('/messages/mute-users', query));\n  }\n  sendMessage(conversationId, data) {\n    return this.post(`/messages/conversations/${conversationId}`, data);\n  }\n  countTotalNotRead() {\n    return this.get('/messages/counting-not-read-messages');\n  }\n  readAllInConversation(conversationId) {\n    return this.post(`/messages/read-all/${conversationId}`);\n  }\n  getMessageUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;\n  }\n  getConversationByStreamId(streamId) {\n    return this.get(`/conversations/stream/${streamId}`);\n  }\n  getPublicMessages(conversationId, query) {\n    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));\n  }\n  sendStreamMessage(conversationId, data) {\n    return this.post(`/messages/stream/conversations/${conversationId}`, data);\n  }\n  sendPublicStreamMessage(conversationId, data) {\n    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);\n  }\n  findPublicConversationPerformer(performerId) {\n    return this.get(`/conversations/stream/public/${performerId}`);\n  }\n  deleteMessage(id) {\n    return this.del(`/messages/${id}`);\n  }\n  deleteAllMessageInConversation(conversationId) {\n    return this.del(`/messages/${conversationId}/remove-all-message`);\n  }\n  updateConversationName(conversationId, data) {\n    return this.put(`/conversations/${conversationId}/update`, data);\n  }\n  muteUser(conversationId, data) {\n    return this.post(`/messages/mute-user/${conversationId}`, data);\n  }\n  checkMuteUser(performerId) {\n    return this.get(this.buildUrl(`/messages/check-mute-chat/${performerId}`));\n  }\n  unMuteUser(id) {\n    return this.del(`/messages/mute-user/${id}`);\n  }\n  deleteConversation(conversationId) {\n    return this.del(`/conversations/${conversationId}`);\n  }\n}\nexport const messageService = new MessageService();","map":{"version":3,"names":["APIRequest","getGlobalConfig","MessageService","getConversations","query","get","buildUrl","searchConversations","createConversation","data","post","getConversationDetail","id","getMessages","conversationId","loadMuteUsers","sendMessage","countTotalNotRead","readAllInConversation","getMessageUploadUrl","config","NEXT_PUBLIC_API_ENDPOINT","getConversationByStreamId","streamId","getPublicMessages","sendStreamMessage","sendPublicStreamMessage","findPublicConversationPerformer","performerId","deleteMessage","del","deleteAllMessageInConversation","updateConversationName","put","muteUser","checkMuteUser","unMuteUser","deleteConversation","messageService"],"sources":["C:/Users/Rokibul/Documents/case/src/services/message.service.ts"],"sourcesContent":["import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class MessageService extends APIRequest {\n  getConversations(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/conversations', query));\n  }\n\n  searchConversations(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/conversations/search', query));\n  }\n\n  createConversation(data: Record<string, string>) {\n    return this.post('/conversations', data);\n  }\n\n  getConversationDetail(id: string) {\n    return this.get(`/conversations/${id}`);\n  }\n\n  getMessages(conversationId: string, query?: Record<string, any>) {\n    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));\n  }\n\n  loadMuteUsers(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/messages/mute-users', query));\n  }\n\n  sendMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/conversations/${conversationId}`, data);\n  }\n\n  countTotalNotRead() {\n    return this.get('/messages/counting-not-read-messages');\n  }\n\n  readAllInConversation(conversationId: string) {\n    return this.post(`/messages/read-all/${conversationId}`);\n  }\n\n  getMessageUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;\n  }\n\n  getConversationByStreamId(streamId: string) {\n    return this.get(`/conversations/stream/${streamId}`);\n  }\n\n  getPublicMessages(conversationId: string, query?: Record<string, any>) {\n    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));\n  }\n\n  sendStreamMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/stream/conversations/${conversationId}`, data);\n  }\n\n  sendPublicStreamMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);\n  }\n\n  findPublicConversationPerformer(performerId: string) {\n    return this.get(`/conversations/stream/public/${performerId}`);\n  }\n\n  deleteMessage(id) {\n    return this.del(`/messages/${id}`);\n  }\n\n  deleteAllMessageInConversation(conversationId) {\n    return this.del(`/messages/${conversationId}/remove-all-message`);\n  }\n\n  updateConversationName(conversationId, data) {\n    return this.put(`/conversations/${conversationId}/update`, data);\n  }\n\n  muteUser(conversationId, data) {\n    return this.post(`/messages/mute-user/${conversationId}`, data);\n  }\n\n  checkMuteUser(performerId) {\n    return this.get(this.buildUrl(`/messages/check-mute-chat/${performerId}`));\n  }\n\n  unMuteUser(id) {\n    return this.del((`/messages/mute-user/${id}`));\n  }\n\n  deleteConversation(conversationId) {\n    return this.del(`/conversations/${conversationId}`);\n  }\n}\n\nexport const messageService = new MessageService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}